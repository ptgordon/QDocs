
qmatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000175e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  0000175e  000017f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  0080200e  0080200e  00001800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c17  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002be  00000000  00000000  00002507  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af9  00000000  00000000  000027c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  000032c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000624  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bd  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003e7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_24>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e9       	ldi	r29, 0x9F	; 159
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ee e5       	ldi	r30, 0x5E	; 94
     214:	f7 e1       	ldi	r31, 0x17	; 23
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ae 30       	cpi	r26, 0x0E	; 14
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	ae e0       	ldi	r26, 0x0E	; 14
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a7 38       	cpi	r26, 0x87	; 135
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 b2 09 	call	0x1364	; 0x1364 <main>
     23a:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <SPIC0>:
uint8_t error_code = 0x00;

void SPIC0(void);

void SPIC0(void)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
	SPIC.CTRL	|= 0xD0;					// Enable clkX2, SPI, msb, and Master mode
     24a:	80 ec       	ldi	r24, 0xC0	; 192
     24c:	98 e0       	ldi	r25, 0x08	; 8
     24e:	20 ec       	ldi	r18, 0xC0	; 192
     250:	38 e0       	ldi	r19, 0x08	; 8
     252:	f9 01       	movw	r30, r18
     254:	20 81       	ld	r18, Z
     256:	20 6d       	ori	r18, 0xD0	; 208
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
	SPIC.CTRL	|= SPI_MODE_3_gc;			// mode 2 setup mode
     25c:	80 ec       	ldi	r24, 0xC0	; 192
     25e:	98 e0       	ldi	r25, 0x08	; 8
     260:	20 ec       	ldi	r18, 0xC0	; 192
     262:	38 e0       	ldi	r19, 0x08	; 8
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	2c 60       	ori	r18, 0x0C	; 12
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
	SPIC.CTRL	|= SPI_PRESCALER_DIV4_gc;	// 2X2M/4 = 1M
     26e:	80 ec       	ldi	r24, 0xC0	; 192
     270:	98 e0       	ldi	r25, 0x08	; 8
     272:	20 ec       	ldi	r18, 0xC0	; 192
     274:	38 e0       	ldi	r19, 0x08	; 8
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
	SPIC.INTCTRL|= SPI_INTLVL_HI_gc;		// Select the interrupt level
     27e:	80 ec       	ldi	r24, 0xC0	; 192
     280:	98 e0       	ldi	r25, 0x08	; 8
     282:	20 ec       	ldi	r18, 0xC0	; 192
     284:	38 e0       	ldi	r19, 0x08	; 8
     286:	f9 01       	movw	r30, r18
     288:	21 81       	ldd	r18, Z+1	; 0x01
     28a:	23 60       	ori	r18, 0x03	; 3
     28c:	fc 01       	movw	r30, r24
     28e:	21 83       	std	Z+1, r18	; 0x01
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <eight_bit_crc>:

uint8_t eight_bit_crc(uint8_t crc, uint8_t data){  //calculates CRCs
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	00 d0       	rcall	.+0      	; 0x29c <eight_bit_crc+0x6>
     29c:	1f 92       	push	r1
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	8b 83       	std	Y+3, r24	; 0x03
     2a4:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t index;
	uint8_t fb;

	index = 8;
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
	do{
		fb = (crc ^ data) & 0x01;
     2aa:	9b 81       	ldd	r25, Y+3	; 0x03
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	89 27       	eor	r24, r25
     2b0:	81 70       	andi	r24, 0x01	; 1
     2b2:	8a 83       	std	Y+2, r24	; 0x02
		data >>= 1;
     2b4:	8c 81       	ldd	r24, Y+4	; 0x04
     2b6:	86 95       	lsr	r24
     2b8:	8c 83       	std	Y+4, r24	; 0x04
		crc >>= 1;
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	86 95       	lsr	r24
     2be:	8b 83       	std	Y+3, r24	; 0x03
			
		if(fb){
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	88 23       	and	r24, r24
     2c4:	21 f0       	breq	.+8      	; 0x2ce <eight_bit_crc+0x38>
			crc ^= 0x8c;
     2c6:	9b 81       	ldd	r25, Y+3	; 0x03
     2c8:	8c e8       	ldi	r24, 0x8C	; 140
     2ca:	89 27       	eor	r24, r25
     2cc:	8b 83       	std	Y+3, r24	; 0x03
		}
	}while (--index); 
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	81 50       	subi	r24, 0x01	; 1
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	88 23       	and	r24, r24
     2d8:	41 f7       	brne	.-48     	; 0x2aa <eight_bit_crc+0x14>
	
	return crc;
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2dc:	24 96       	adiw	r28, 0x04	; 4
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <setupsblockpopulate>:

uint8_t * setupsblockpopulate() {  //values according to "standard settings" in qmatrix datasheet
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	1f 92       	push	r1
     2ee:	1f 92       	push	r1
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t setups[100];
	int j;

	for (j=0; j<16; j++){
     2f4:	19 82       	std	Y+1, r1	; 0x01
     2f6:	1a 82       	std	Y+2, r1	; 0x02
     2f8:	0c c0       	rjmp	.+24     	; 0x312 <setupsblockpopulate+0x2a>
		setups[j] = 0xaa;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	83 5e       	subi	r24, 0xE3	; 227
     300:	9f 4d       	sbci	r25, 0xDF	; 223
     302:	2a ea       	ldi	r18, 0xAA	; 170
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
uint8_t * setupsblockpopulate() {  //values according to "standard settings" in qmatrix datasheet
	
	static uint8_t setups[100];
	int j;

	for (j=0; j<16; j++){
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	9a 81       	ldd	r25, Y+2	; 0x02
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	89 83       	std	Y+1, r24	; 0x01
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
     316:	40 97       	sbiw	r24, 0x10	; 16
     318:	84 f3       	brlt	.-32     	; 0x2fa <setupsblockpopulate+0x12>
		setups[j] = 0xaa;
	}
	
	for (j=16; j<24; j++){
     31a:	80 e1       	ldi	r24, 0x10	; 16
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	9a 83       	std	Y+2, r25	; 0x02
     322:	0c c0       	rjmp	.+24     	; 0x33c <setupsblockpopulate+0x54>
		setups[j] = 0xa3;
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	83 5e       	subi	r24, 0xE3	; 227
     32a:	9f 4d       	sbci	r25, 0xDF	; 223
     32c:	23 ea       	ldi	r18, 0xA3	; 163
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18

	for (j=0; j<16; j++){
		setups[j] = 0xaa;
	}
	
	for (j=16; j<24; j++){
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	9a 83       	std	Y+2, r25	; 0x02
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	9a 81       	ldd	r25, Y+2	; 0x02
     340:	48 97       	sbiw	r24, 0x18	; 24
     342:	84 f3       	brlt	.-32     	; 0x324 <setupsblockpopulate+0x3c>
		setups[j] = 0xa3;
	}
	
	for (j=24; j<28; j++){
     344:	88 e1       	ldi	r24, 0x18	; 24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	0c c0       	rjmp	.+24     	; 0x366 <setupsblockpopulate+0x7e>
		setups[j] = 0x52;
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	83 5e       	subi	r24, 0xE3	; 227
     354:	9f 4d       	sbci	r25, 0xDF	; 223
     356:	22 e5       	ldi	r18, 0x52	; 82
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
	
	for (j=16; j<24; j++){
		setups[j] = 0xa3;
	}
	
	for (j=24; j<28; j++){
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	89 83       	std	Y+1, r24	; 0x01
     364:	9a 83       	std	Y+2, r25	; 0x02
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	4c 97       	sbiw	r24, 0x1c	; 28
     36c:	84 f3       	brlt	.-32     	; 0x34e <setupsblockpopulate+0x66>
		setups[j] = 0x52;
	}
	
	for (j=28; j<32; j++){
     36e:	8c e1       	ldi	r24, 0x1C	; 28
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	9a 83       	std	Y+2, r25	; 0x02
     376:	0c c0       	rjmp	.+24     	; 0x390 <setupsblockpopulate+0xa8>
		setups[j] = 0x50;
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	9a 81       	ldd	r25, Y+2	; 0x02
     37c:	83 5e       	subi	r24, 0xE3	; 227
     37e:	9f 4d       	sbci	r25, 0xDF	; 223
     380:	20 e5       	ldi	r18, 0x50	; 80
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
	
	for (j=24; j<28; j++){
		setups[j] = 0x52;
	}
	
	for (j=28; j<32; j++){
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	89 83       	std	Y+1, r24	; 0x01
     38e:	9a 83       	std	Y+2, r25	; 0x02
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	9a 81       	ldd	r25, Y+2	; 0x02
     394:	80 97       	sbiw	r24, 0x20	; 32
     396:	84 f3       	brlt	.-32     	; 0x378 <setupsblockpopulate+0x90>
		setups[j] = 0x50;
	}
	
	for (j=32; j<37; j++){
     398:	80 e2       	ldi	r24, 0x20	; 32
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	0c c0       	rjmp	.+24     	; 0x3ba <setupsblockpopulate+0xd2>
		setups[j] = 0x52;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	9a 81       	ldd	r25, Y+2	; 0x02
     3a6:	83 5e       	subi	r24, 0xE3	; 227
     3a8:	9f 4d       	sbci	r25, 0xDF	; 223
     3aa:	22 e5       	ldi	r18, 0x52	; 82
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
	
	for (j=28; j<32; j++){
		setups[j] = 0x50;
	}
	
	for (j=32; j<37; j++){
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	85 97       	sbiw	r24, 0x25	; 37
     3c0:	84 f3       	brlt	.-32     	; 0x3a2 <setupsblockpopulate+0xba>
		setups[j] = 0x52;
	}
	
	for (j=37; j<40; j++){
     3c2:	85 e2       	ldi	r24, 0x25	; 37
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <setupsblockpopulate+0xfc>
		setups[j] = 0x50;
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	83 5e       	subi	r24, 0xE3	; 227
     3d2:	9f 4d       	sbci	r25, 0xDF	; 223
     3d4:	20 e5       	ldi	r18, 0x50	; 80
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
	
	for (j=32; j<37; j++){
		setups[j] = 0x52;
	}
	
	for (j=37; j<40; j++){
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	9a 81       	ldd	r25, Y+2	; 0x02
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	89 83       	std	Y+1, r24	; 0x01
     3e2:	9a 83       	std	Y+2, r25	; 0x02
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	88 97       	sbiw	r24, 0x28	; 40
     3ea:	84 f3       	brlt	.-32     	; 0x3cc <setupsblockpopulate+0xe4>
		setups[j] = 0x50;
	}
	
	for (j=40; j<43; j++){
     3ec:	88 e2       	ldi	r24, 0x28	; 40
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	9a 83       	std	Y+2, r25	; 0x02
     3f4:	0c c0       	rjmp	.+24     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
		setups[j] = 0x50;
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	83 5e       	subi	r24, 0xE3	; 227
     3fc:	9f 4d       	sbci	r25, 0xDF	; 223
     3fe:	20 e5       	ldi	r18, 0x50	; 80
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
	
	for (j=37; j<40; j++){
		setups[j] = 0x50;
	}
	
	for (j=40; j<43; j++){
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	9a 81       	ldd	r25, Y+2	; 0x02
     412:	8b 97       	sbiw	r24, 0x2b	; 43
     414:	84 f3       	brlt	.-32     	; 0x3f6 <setupsblockpopulate+0x10e>
		setups[j] = 0x50;
	}
	
	for (j=43; j<48; j++){
     416:	8b e2       	ldi	r24, 0x2B	; 43
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	0c c0       	rjmp	.+24     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
		setups[j] = 0x50;
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	9a 81       	ldd	r25, Y+2	; 0x02
     424:	83 5e       	subi	r24, 0xE3	; 227
     426:	9f 4d       	sbci	r25, 0xDF	; 223
     428:	20 e5       	ldi	r18, 0x50	; 80
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
	
	for (j=40; j<43; j++){
		setups[j] = 0x50;
	}
	
	for (j=43; j<48; j++){
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	9a 83       	std	Y+2, r25	; 0x02
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	c0 97       	sbiw	r24, 0x30	; 48
     43e:	84 f3       	brlt	.-32     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
		setups[j] = 0x50;
	}
	
	for (j=48; j<72; j++){
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	0b c0       	rjmp	.+22     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
		setups[j] = 0x00;
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	83 5e       	subi	r24, 0xE3	; 227
     450:	9f 4d       	sbci	r25, 0xDF	; 223
     452:	fc 01       	movw	r30, r24
     454:	10 82       	st	Z, r1
	
	for (j=43; j<48; j++){
		setups[j] = 0x50;
	}
	
	for (j=48; j<72; j++){
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	89 83       	std	Y+1, r24	; 0x01
     45e:	9a 83       	std	Y+2, r25	; 0x02
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	88 34       	cpi	r24, 0x48	; 72
     466:	91 05       	cpc	r25, r1
     468:	84 f3       	brlt	.-32     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
		setups[j] = 0x00;
	}

	for (j=72; j<96; j++){
     46a:	88 e4       	ldi	r24, 0x48	; 72
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	0b c0       	rjmp	.+22     	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
		setups[j] = 0x00;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	83 5e       	subi	r24, 0xE3	; 227
     47a:	9f 4d       	sbci	r25, 0xDF	; 223
     47c:	fc 01       	movw	r30, r24
     47e:	10 82       	st	Z, r1
	
	for (j=48; j<72; j++){
		setups[j] = 0x00;
	}

	for (j=72; j<96; j++){
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	80 36       	cpi	r24, 0x60	; 96
     490:	91 05       	cpc	r25, r1
     492:	84 f3       	brlt	.-32     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
		setups[j] = 0x00;
	}
	j = 96;
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	9a 83       	std	Y+2, r25	; 0x02
	setups[j] = 0x00;
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	83 5e       	subi	r24, 0xE3	; 227
     4a2:	9f 4d       	sbci	r25, 0xDF	; 223
     4a4:	fc 01       	movw	r30, r24
     4a6:	10 82       	st	Z, r1
	
	j=97;
     4a8:	81 e6       	ldi	r24, 0x61	; 97
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02
	setups[j] = 0x02;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	83 5e       	subi	r24, 0xE3	; 227
     4b6:	9f 4d       	sbci	r25, 0xDF	; 223
     4b8:	22 e0       	ldi	r18, 0x02	; 2
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18

	j=98;
     4be:	82 e6       	ldi	r24, 0x62	; 98
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	89 83       	std	Y+1, r24	; 0x01
     4c4:	9a 83       	std	Y+2, r25	; 0x02
	setups[j] = 0x54;
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	83 5e       	subi	r24, 0xE3	; 227
     4cc:	9f 4d       	sbci	r25, 0xDF	; 223
     4ce:	24 e5       	ldi	r18, 0x54	; 84
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18

	j=99;
     4d4:	83 e6       	ldi	r24, 0x63	; 99
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	9a 83       	std	Y+2, r25	; 0x02
	setups[j] = 0x00;
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	83 5e       	subi	r24, 0xE3	; 227
     4e2:	9f 4d       	sbci	r25, 0xDF	; 223
     4e4:	fc 01       	movw	r30, r24
     4e6:	10 82       	st	Z, r1

	return setups;
     4e8:	8d e1       	ldi	r24, 0x1D	; 29
     4ea:	90 e2       	ldi	r25, 0x20	; 32
}
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <__vector_24>:

ISR(SPIC_INT_vect)	// ISR called when SPI finishes with transmitting byte in SPIn.Data register.
{
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     506:	0f 92       	push	r0
     508:	2f 93       	push	r18
     50a:	3f 93       	push	r19
     50c:	8f 93       	push	r24
     50e:	9f 93       	push	r25
     510:	ef 93       	push	r30
     512:	ff 93       	push	r31
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	cli();
     51c:	f8 94       	cli

	// if you care about incoming data copy SPIC.DATA into your RX buffER
	PORTC.OUT |= 0x10;
     51e:	80 e4       	ldi	r24, 0x40	; 64
     520:	96 e0       	ldi	r25, 0x06	; 6
     522:	20 e4       	ldi	r18, 0x40	; 64
     524:	36 e0       	ldi	r19, 0x06	; 6
     526:	f9 01       	movw	r30, r18
     528:	24 81       	ldd	r18, Z+4	; 0x04
     52a:	20 61       	ori	r18, 0x10	; 16
     52c:	fc 01       	movw	r30, r24
     52e:	24 83       	std	Z+4, r18	; 0x04
	X = SPIC.DATA;
     530:	80 ec       	ldi	r24, 0xC0	; 192
     532:	98 e0       	ldi	r25, 0x08	; 8
     534:	fc 01       	movw	r30, r24
     536:	83 81       	ldd	r24, Z+3	; 0x03
     538:	80 93 11 20 	sts	0x2011, r24	; 0x802011 <X>
	sei();
     53c:	78 94       	sei
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	3f 91       	pop	r19
     54c:	2f 91       	pop	r18
     54e:	0f 90       	pop	r0
     550:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     554:	0f 90       	pop	r0
     556:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <DRDYCHECK>:

void DRDYCHECK(void)   // this pin must be high in order for IC to accept commands
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	a1 97       	sbiw	r28, 0x21	; 33
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	de bf       	out	0x3e, r29	; 62
	drty=PORTC.IN;
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	96 e0       	ldi	r25, 0x06	; 6
     572:	fc 01       	movw	r30, r24
     574:	80 85       	ldd	r24, Z+8	; 0x08
     576:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <drty>
	while((drty & 0x08)!= 0x08)
     57a:	f9 c0       	rjmp	.+498    	; 0x76e <DRDYCHECK+0x20e>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	a0 e2       	ldi	r26, 0x20	; 32
     582:	b1 e4       	ldi	r27, 0x41	; 65
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	ab 83       	std	Y+3, r26	; 0x03
     58a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     58c:	2b ea       	ldi	r18, 0xAB	; 171
     58e:	3a ea       	ldi	r19, 0xAA	; 170
     590:	4a e2       	ldi	r20, 0x2A	; 42
     592:	5f e3       	ldi	r21, 0x3F	; 63
     594:	69 81       	ldd	r22, Y+1	; 0x01
     596:	7a 81       	ldd	r23, Y+2	; 0x02
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	9c 81       	ldd	r25, Y+4	; 0x04
     59c:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	8d 83       	std	Y+5, r24	; 0x05
     5a6:	9e 83       	std	Y+6, r25	; 0x06
     5a8:	af 83       	std	Y+7, r26	; 0x07
     5aa:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	5f e3       	ldi	r21, 0x3F	; 63
     5b4:	69 81       	ldd	r22, Y+1	; 0x01
     5b6:	7a 81       	ldd	r23, Y+2	; 0x02
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	89 87       	std	Y+9, r24	; 0x09
     5c6:	9a 87       	std	Y+10, r25	; 0x0a
     5c8:	ab 87       	std	Y+11, r26	; 0x0b
     5ca:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	5f e3       	ldi	r21, 0x3F	; 63
     5d4:	6d 81       	ldd	r22, Y+5	; 0x05
     5d6:	7e 81       	ldd	r23, Y+6	; 0x06
     5d8:	8f 81       	ldd	r24, Y+7	; 0x07
     5da:	98 85       	ldd	r25, Y+8	; 0x08
     5dc:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     5e0:	88 23       	and	r24, r24
     5e2:	1c f4       	brge	.+6      	; 0x5ea <DRDYCHECK+0x8a>
		__ticks = 1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	8d 87       	std	Y+13, r24	; 0x0d
     5e8:	b6 c0       	rjmp	.+364    	; 0x756 <DRDYCHECK+0x1f6>
	else if (__tmp2 > 65535)
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	3f ef       	ldi	r19, 0xFF	; 255
     5ee:	4f e7       	ldi	r20, 0x7F	; 127
     5f0:	57 e4       	ldi	r21, 0x47	; 71
     5f2:	69 85       	ldd	r22, Y+9	; 0x09
     5f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     5f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5fa:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     5fe:	18 16       	cp	r1, r24
     600:	0c f0       	brlt	.+2      	; 0x604 <DRDYCHECK+0xa4>
     602:	7f c0       	rjmp	.+254    	; 0x702 <DRDYCHECK+0x1a2>
	{
		_delay_ms(__us / 1000.0);
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	4a e7       	ldi	r20, 0x7A	; 122
     60a:	54 e4       	ldi	r21, 0x44	; 68
     60c:	69 81       	ldd	r22, Y+1	; 0x01
     60e:	7a 81       	ldd	r23, Y+2	; 0x02
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	0e 94 25 0a 	call	0x144a	; 0x144a <__divsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	8e 87       	std	Y+14, r24	; 0x0e
     61e:	9f 87       	std	Y+15, r25	; 0x0f
     620:	a8 8b       	std	Y+16, r26	; 0x10
     622:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	4a ef       	ldi	r20, 0xFA	; 250
     62a:	53 e4       	ldi	r21, 0x43	; 67
     62c:	6e 85       	ldd	r22, Y+14	; 0x0e
     62e:	7f 85       	ldd	r23, Y+15	; 0x0f
     630:	88 89       	ldd	r24, Y+16	; 0x10
     632:	99 89       	ldd	r25, Y+17	; 0x11
     634:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     638:	dc 01       	movw	r26, r24
     63a:	cb 01       	movw	r24, r22
     63c:	8a 8b       	std	Y+18, r24	; 0x12
     63e:	9b 8b       	std	Y+19, r25	; 0x13
     640:	ac 8b       	std	Y+20, r26	; 0x14
     642:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	40 e8       	ldi	r20, 0x80	; 128
     64a:	5f e3       	ldi	r21, 0x3F	; 63
     64c:	6a 89       	ldd	r22, Y+18	; 0x12
     64e:	7b 89       	ldd	r23, Y+19	; 0x13
     650:	8c 89       	ldd	r24, Y+20	; 0x14
     652:	9d 89       	ldd	r25, Y+21	; 0x15
     654:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     658:	88 23       	and	r24, r24
     65a:	2c f4       	brge	.+10     	; 0x666 <DRDYCHECK+0x106>
		__ticks = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	8e 8b       	std	Y+22, r24	; 0x16
     662:	9f 8b       	std	Y+23, r25	; 0x17
     664:	41 c0       	rjmp	.+130    	; 0x6e8 <DRDYCHECK+0x188>
	else if (__tmp > 65535)
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	4f e7       	ldi	r20, 0x7F	; 127
     66c:	57 e4       	ldi	r21, 0x47	; 71
     66e:	6a 89       	ldd	r22, Y+18	; 0x12
     670:	7b 89       	ldd	r23, Y+19	; 0x13
     672:	8c 89       	ldd	r24, Y+20	; 0x14
     674:	9d 89       	ldd	r25, Y+21	; 0x15
     676:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     67a:	18 16       	cp	r1, r24
     67c:	5c f5       	brge	.+86     	; 0x6d4 <DRDYCHECK+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e2       	ldi	r20, 0x20	; 32
     684:	51 e4       	ldi	r21, 0x41	; 65
     686:	6e 85       	ldd	r22, Y+14	; 0x0e
     688:	7f 85       	ldd	r23, Y+15	; 0x0f
     68a:	88 89       	ldd	r24, Y+16	; 0x10
     68c:	99 89       	ldd	r25, Y+17	; 0x11
     68e:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	8e 8b       	std	Y+22, r24	; 0x16
     6a4:	9f 8b       	std	Y+23, r25	; 0x17
     6a6:	0f c0       	rjmp	.+30     	; 0x6c6 <DRDYCHECK+0x166>
     6a8:	82 e3       	ldi	r24, 0x32	; 50
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	88 8f       	std	Y+24, r24	; 0x18
     6ae:	99 8f       	std	Y+25, r25	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6b0:	88 8d       	ldd	r24, Y+24	; 0x18
     6b2:	99 8d       	ldd	r25, Y+25	; 0x19
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <DRDYCHECK+0x154>
     6b8:	88 8f       	std	Y+24, r24	; 0x18
     6ba:	99 8f       	std	Y+25, r25	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6bc:	8e 89       	ldd	r24, Y+22	; 0x16
     6be:	9f 89       	ldd	r25, Y+23	; 0x17
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	8e 8b       	std	Y+22, r24	; 0x16
     6c4:	9f 8b       	std	Y+23, r25	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c6:	8e 89       	ldd	r24, Y+22	; 0x16
     6c8:	9f 89       	ldd	r25, Y+23	; 0x17
     6ca:	89 2b       	or	r24, r25
     6cc:	69 f7       	brne	.-38     	; 0x6a8 <DRDYCHECK+0x148>
     6ce:	89 a1       	ldd	r24, Y+33	; 0x21
     6d0:	8d 87       	std	Y+13, r24	; 0x0d
     6d2:	41 c0       	rjmp	.+130    	; 0x756 <DRDYCHECK+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d4:	6a 89       	ldd	r22, Y+18	; 0x12
     6d6:	7b 89       	ldd	r23, Y+19	; 0x13
     6d8:	8c 89       	ldd	r24, Y+20	; 0x14
     6da:	9d 89       	ldd	r25, Y+21	; 0x15
     6dc:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	8e 8b       	std	Y+22, r24	; 0x16
     6e6:	9f 8b       	std	Y+23, r25	; 0x17
     6e8:	8e 89       	ldd	r24, Y+22	; 0x16
     6ea:	9f 89       	ldd	r25, Y+23	; 0x17
     6ec:	8a 8f       	std	Y+26, r24	; 0x1a
     6ee:	9b 8f       	std	Y+27, r25	; 0x1b
     6f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <DRDYCHECK+0x194>
     6f8:	8a 8f       	std	Y+26, r24	; 0x1a
     6fa:	9b 8f       	std	Y+27, r25	; 0x1b
     6fc:	89 a1       	ldd	r24, Y+33	; 0x21
     6fe:	8d 87       	std	Y+13, r24	; 0x0d
     700:	2a c0       	rjmp	.+84     	; 0x756 <DRDYCHECK+0x1f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	4f e7       	ldi	r20, 0x7F	; 127
     708:	53 e4       	ldi	r21, 0x43	; 67
     70a:	6d 81       	ldd	r22, Y+5	; 0x05
     70c:	7e 81       	ldd	r23, Y+6	; 0x06
     70e:	8f 81       	ldd	r24, Y+7	; 0x07
     710:	98 85       	ldd	r25, Y+8	; 0x08
     712:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     716:	18 16       	cp	r1, r24
     718:	ac f4       	brge	.+42     	; 0x744 <DRDYCHECK+0x1e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     71a:	69 85       	ldd	r22, Y+9	; 0x09
     71c:	7a 85       	ldd	r23, Y+10	; 0x0a
     71e:	8b 85       	ldd	r24, Y+11	; 0x0b
     720:	9c 85       	ldd	r25, Y+12	; 0x0c
     722:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     726:	dc 01       	movw	r26, r24
     728:	cb 01       	movw	r24, r22
     72a:	8c 8f       	std	Y+28, r24	; 0x1c
     72c:	9d 8f       	std	Y+29, r25	; 0x1d
     72e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     730:	9d 8d       	ldd	r25, Y+29	; 0x1d
     732:	8e 8f       	std	Y+30, r24	; 0x1e
     734:	9f 8f       	std	Y+31, r25	; 0x1f
     736:	8e 8d       	ldd	r24, Y+30	; 0x1e
     738:	9f 8d       	ldd	r25, Y+31	; 0x1f
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <DRDYCHECK+0x1da>
     73e:	8e 8f       	std	Y+30, r24	; 0x1e
     740:	9f 8f       	std	Y+31, r25	; 0x1f
     742:	0f c0       	rjmp	.+30     	; 0x762 <DRDYCHECK+0x202>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     744:	6d 81       	ldd	r22, Y+5	; 0x05
     746:	7e 81       	ldd	r23, Y+6	; 0x06
     748:	8f 81       	ldd	r24, Y+7	; 0x07
     74a:	98 85       	ldd	r25, Y+8	; 0x08
     74c:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	8d 87       	std	Y+13, r24	; 0x0d
     756:	8d 85       	ldd	r24, Y+13	; 0x0d
     758:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     75a:	88 a1       	ldd	r24, Y+32	; 0x20
     75c:	8a 95       	dec	r24
     75e:	f1 f7       	brne	.-4      	; 0x75c <DRDYCHECK+0x1fc>
     760:	88 a3       	std	Y+32, r24	; 0x20
	{
		_delay_us(10);
		drty=PORTC.IN;
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	96 e0       	ldi	r25, 0x06	; 6
     766:	fc 01       	movw	r30, r24
     768:	80 85       	ldd	r24, Z+8	; 0x08
     76a:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <drty>
}

void DRDYCHECK(void)   // this pin must be high in order for IC to accept commands
{
	drty=PORTC.IN;
	while((drty & 0x08)!= 0x08)
     76e:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <drty>
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	88 70       	andi	r24, 0x08	; 8
     778:	99 27       	eor	r25, r25
     77a:	89 2b       	or	r24, r25
     77c:	09 f4       	brne	.+2      	; 0x780 <DRDYCHECK+0x220>
     77e:	fe ce       	rjmp	.-516    	; 0x57c <DRDYCHECK+0x1c>
	{
		_delay_us(10);
		drty=PORTC.IN;
	}
}
     780:	a1 96       	adiw	r28, 0x21	; 33
     782:	cd bf       	out	0x3d, r28	; 61
     784:	de bf       	out	0x3e, r29	; 62
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <COMMAND>:

void COMMAND(uint8_t command)  //general command format
{
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	a1 97       	sbiw	r28, 0x21	; 33
     796:	cd bf       	out	0x3d, r28	; 61
     798:	de bf       	out	0x3e, r29	; 62
     79a:	89 a3       	std	Y+33, r24	; 0x21
	DRDYCHECK();
     79c:	0e 94 b0 02 	call	0x560	; 0x560 <DRDYCHECK>
	PORTC.OUT &= 0xEF;
     7a0:	80 e4       	ldi	r24, 0x40	; 64
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	20 e4       	ldi	r18, 0x40	; 64
     7a6:	36 e0       	ldi	r19, 0x06	; 6
     7a8:	f9 01       	movw	r30, r18
     7aa:	24 81       	ldd	r18, Z+4	; 0x04
     7ac:	2f 7e       	andi	r18, 0xEF	; 239
     7ae:	fc 01       	movw	r30, r24
     7b0:	24 83       	std	Z+4, r18	; 0x04
	SPIC.DATA = command;
     7b2:	80 ec       	ldi	r24, 0xC0	; 192
     7b4:	98 e0       	ldi	r25, 0x08	; 8
     7b6:	29 a1       	ldd	r18, Y+33	; 0x21
     7b8:	fc 01       	movw	r30, r24
     7ba:	23 83       	std	Z+3, r18	; 0x03
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e2       	ldi	r26, 0x20	; 32
     7c2:	b2 e4       	ldi	r27, 0x42	; 66
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	9a 83       	std	Y+2, r25	; 0x02
     7c8:	ab 83       	std	Y+3, r26	; 0x03
     7ca:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     7cc:	2b ea       	ldi	r18, 0xAB	; 171
     7ce:	3a ea       	ldi	r19, 0xAA	; 170
     7d0:	4a e2       	ldi	r20, 0x2A	; 42
     7d2:	5f e3       	ldi	r21, 0x3F	; 63
     7d4:	69 81       	ldd	r22, Y+1	; 0x01
     7d6:	7a 81       	ldd	r23, Y+2	; 0x02
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	9c 81       	ldd	r25, Y+4	; 0x04
     7dc:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	8d 83       	std	Y+5, r24	; 0x05
     7e6:	9e 83       	std	Y+6, r25	; 0x06
     7e8:	af 83       	std	Y+7, r26	; 0x07
     7ea:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	69 81       	ldd	r22, Y+1	; 0x01
     7f6:	7a 81       	ldd	r23, Y+2	; 0x02
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	89 87       	std	Y+9, r24	; 0x09
     806:	9a 87       	std	Y+10, r25	; 0x0a
     808:	ab 87       	std	Y+11, r26	; 0x0b
     80a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e8       	ldi	r20, 0x80	; 128
     812:	5f e3       	ldi	r21, 0x3F	; 63
     814:	6d 81       	ldd	r22, Y+5	; 0x05
     816:	7e 81       	ldd	r23, Y+6	; 0x06
     818:	8f 81       	ldd	r24, Y+7	; 0x07
     81a:	98 85       	ldd	r25, Y+8	; 0x08
     81c:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	1c f4       	brge	.+6      	; 0x82a <COMMAND+0x9e>
		__ticks = 1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	8d 87       	std	Y+13, r24	; 0x0d
     828:	b2 c0       	rjmp	.+356    	; 0x98e <COMMAND+0x202>
	else if (__tmp2 > 65535)
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	3f ef       	ldi	r19, 0xFF	; 255
     82e:	4f e7       	ldi	r20, 0x7F	; 127
     830:	57 e4       	ldi	r21, 0x47	; 71
     832:	69 85       	ldd	r22, Y+9	; 0x09
     834:	7a 85       	ldd	r23, Y+10	; 0x0a
     836:	8b 85       	ldd	r24, Y+11	; 0x0b
     838:	9c 85       	ldd	r25, Y+12	; 0x0c
     83a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     83e:	18 16       	cp	r1, r24
     840:	0c f0       	brlt	.+2      	; 0x844 <COMMAND+0xb8>
     842:	7b c0       	rjmp	.+246    	; 0x93a <COMMAND+0x1ae>
	{
		_delay_ms(__us / 1000.0);
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	4a e7       	ldi	r20, 0x7A	; 122
     84a:	54 e4       	ldi	r21, 0x44	; 68
     84c:	69 81       	ldd	r22, Y+1	; 0x01
     84e:	7a 81       	ldd	r23, Y+2	; 0x02
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	0e 94 25 0a 	call	0x144a	; 0x144a <__divsf3>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	8e 87       	std	Y+14, r24	; 0x0e
     85e:	9f 87       	std	Y+15, r25	; 0x0f
     860:	a8 8b       	std	Y+16, r26	; 0x10
     862:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	4a ef       	ldi	r20, 0xFA	; 250
     86a:	53 e4       	ldi	r21, 0x43	; 67
     86c:	6e 85       	ldd	r22, Y+14	; 0x0e
     86e:	7f 85       	ldd	r23, Y+15	; 0x0f
     870:	88 89       	ldd	r24, Y+16	; 0x10
     872:	99 89       	ldd	r25, Y+17	; 0x11
     874:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	8a 8b       	std	Y+18, r24	; 0x12
     87e:	9b 8b       	std	Y+19, r25	; 0x13
     880:	ac 8b       	std	Y+20, r26	; 0x14
     882:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e8       	ldi	r20, 0x80	; 128
     88a:	5f e3       	ldi	r21, 0x3F	; 63
     88c:	6a 89       	ldd	r22, Y+18	; 0x12
     88e:	7b 89       	ldd	r23, Y+19	; 0x13
     890:	8c 89       	ldd	r24, Y+20	; 0x14
     892:	9d 89       	ldd	r25, Y+21	; 0x15
     894:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     898:	88 23       	and	r24, r24
     89a:	2c f4       	brge	.+10     	; 0x8a6 <COMMAND+0x11a>
		__ticks = 1;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	8e 8b       	std	Y+22, r24	; 0x16
     8a2:	9f 8b       	std	Y+23, r25	; 0x17
     8a4:	3f c0       	rjmp	.+126    	; 0x924 <COMMAND+0x198>
	else if (__tmp > 65535)
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	3f ef       	ldi	r19, 0xFF	; 255
     8aa:	4f e7       	ldi	r20, 0x7F	; 127
     8ac:	57 e4       	ldi	r21, 0x47	; 71
     8ae:	6a 89       	ldd	r22, Y+18	; 0x12
     8b0:	7b 89       	ldd	r23, Y+19	; 0x13
     8b2:	8c 89       	ldd	r24, Y+20	; 0x14
     8b4:	9d 89       	ldd	r25, Y+21	; 0x15
     8b6:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     8ba:	18 16       	cp	r1, r24
     8bc:	4c f5       	brge	.+82     	; 0x910 <COMMAND+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e2       	ldi	r20, 0x20	; 32
     8c4:	51 e4       	ldi	r21, 0x41	; 65
     8c6:	6e 85       	ldd	r22, Y+14	; 0x0e
     8c8:	7f 85       	ldd	r23, Y+15	; 0x0f
     8ca:	88 89       	ldd	r24, Y+16	; 0x10
     8cc:	99 89       	ldd	r25, Y+17	; 0x11
     8ce:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     8d2:	dc 01       	movw	r26, r24
     8d4:	cb 01       	movw	r24, r22
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	8e 8b       	std	Y+22, r24	; 0x16
     8e4:	9f 8b       	std	Y+23, r25	; 0x17
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <COMMAND+0x17a>
     8e8:	82 e3       	ldi	r24, 0x32	; 50
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	88 8f       	std	Y+24, r24	; 0x18
     8ee:	99 8f       	std	Y+25, r25	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8f0:	88 8d       	ldd	r24, Y+24	; 0x18
     8f2:	99 8d       	ldd	r25, Y+25	; 0x19
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <COMMAND+0x168>
     8f8:	88 8f       	std	Y+24, r24	; 0x18
     8fa:	99 8f       	std	Y+25, r25	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fc:	8e 89       	ldd	r24, Y+22	; 0x16
     8fe:	9f 89       	ldd	r25, Y+23	; 0x17
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	8e 8b       	std	Y+22, r24	; 0x16
     904:	9f 8b       	std	Y+23, r25	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     906:	8e 89       	ldd	r24, Y+22	; 0x16
     908:	9f 89       	ldd	r25, Y+23	; 0x17
     90a:	89 2b       	or	r24, r25
     90c:	69 f7       	brne	.-38     	; 0x8e8 <COMMAND+0x15c>
     90e:	3f c0       	rjmp	.+126    	; 0x98e <COMMAND+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     910:	6a 89       	ldd	r22, Y+18	; 0x12
     912:	7b 89       	ldd	r23, Y+19	; 0x13
     914:	8c 89       	ldd	r24, Y+20	; 0x14
     916:	9d 89       	ldd	r25, Y+21	; 0x15
     918:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	8e 8b       	std	Y+22, r24	; 0x16
     922:	9f 8b       	std	Y+23, r25	; 0x17
     924:	8e 89       	ldd	r24, Y+22	; 0x16
     926:	9f 89       	ldd	r25, Y+23	; 0x17
     928:	8a 8f       	std	Y+26, r24	; 0x1a
     92a:	9b 8f       	std	Y+27, r25	; 0x1b
     92c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     92e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <COMMAND+0x1a4>
     934:	8a 8f       	std	Y+26, r24	; 0x1a
     936:	9b 8f       	std	Y+27, r25	; 0x1b
     938:	2a c0       	rjmp	.+84     	; 0x98e <COMMAND+0x202>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	4f e7       	ldi	r20, 0x7F	; 127
     940:	53 e4       	ldi	r21, 0x43	; 67
     942:	6d 81       	ldd	r22, Y+5	; 0x05
     944:	7e 81       	ldd	r23, Y+6	; 0x06
     946:	8f 81       	ldd	r24, Y+7	; 0x07
     948:	98 85       	ldd	r25, Y+8	; 0x08
     94a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	ac f4       	brge	.+42     	; 0x97c <COMMAND+0x1f0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     952:	69 85       	ldd	r22, Y+9	; 0x09
     954:	7a 85       	ldd	r23, Y+10	; 0x0a
     956:	8b 85       	ldd	r24, Y+11	; 0x0b
     958:	9c 85       	ldd	r25, Y+12	; 0x0c
     95a:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	8c 8f       	std	Y+28, r24	; 0x1c
     964:	9d 8f       	std	Y+29, r25	; 0x1d
     966:	8c 8d       	ldd	r24, Y+28	; 0x1c
     968:	9d 8d       	ldd	r25, Y+29	; 0x1d
     96a:	8e 8f       	std	Y+30, r24	; 0x1e
     96c:	9f 8f       	std	Y+31, r25	; 0x1f
     96e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     970:	9f 8d       	ldd	r25, Y+31	; 0x1f
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <COMMAND+0x1e6>
     976:	8e 8f       	std	Y+30, r24	; 0x1e
     978:	9f 8f       	std	Y+31, r25	; 0x1f
     97a:	0f c0       	rjmp	.+30     	; 0x99a <COMMAND+0x20e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     97c:	6d 81       	ldd	r22, Y+5	; 0x05
     97e:	7e 81       	ldd	r23, Y+6	; 0x06
     980:	8f 81       	ldd	r24, Y+7	; 0x07
     982:	98 85       	ldd	r25, Y+8	; 0x08
     984:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	8d 87       	std	Y+13, r24	; 0x0d
     98e:	8d 85       	ldd	r24, Y+13	; 0x0d
     990:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     992:	88 a1       	ldd	r24, Y+32	; 0x20
     994:	8a 95       	dec	r24
     996:	f1 f7       	brne	.-4      	; 0x994 <COMMAND+0x208>
     998:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(40);
}
     99a:	a1 96       	adiw	r28, 0x21	; 33
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <LAST_COMMAND>:

void LAST_COMMAND(void)  //always done after restart or comms error
{
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	if(loop_process == initialize){
     9ae:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <loop_process>
     9b2:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <initialize>
     9b6:	98 17       	cp	r25, r24
     9b8:	99 f5       	brne	.+102    	; 0xa20 <LAST_COMMAND+0x7a>
		while (X != 0xF0)
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <LAST_COMMAND+0x1c>
		{
			COMMAND(0x0F);
     9bc:	8f e0       	ldi	r24, 0x0F	; 15
     9be:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
}

void LAST_COMMAND(void)  //always done after restart or comms error
{
	if(loop_process == initialize){
		while (X != 0xF0)
     9c2:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     9c6:	80 3f       	cpi	r24, 0xF0	; 240
     9c8:	c9 f7       	brne	.-14     	; 0x9bc <LAST_COMMAND+0x16>
		{
			COMMAND(0x0F);
		}
		COMMAND(eeprom_crc);
     9ca:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <eeprom_crc>
     9ce:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		COMMAND(null_command);
     9d2:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     9d6:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		temp = X;
     9da:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     9de:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <temp>
		if((temp != setupcrccheck) && (crccheckflag == 0x01)){
     9e2:	90 91 82 20 	lds	r25, 0x2082	; 0x802082 <temp>
     9e6:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end>
     9ea:	98 17       	cp	r25, r24
     9ec:	49 f0       	breq	.+18     	; 0xa00 <LAST_COMMAND+0x5a>
     9ee:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <crccheckflag>
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	29 f4       	brne	.+10     	; 0xa00 <LAST_COMMAND+0x5a>
			loop_process = error_handle;
     9f6:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
     9fa:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
     9fe:	10 c0       	rjmp	.+32     	; 0xa20 <LAST_COMMAND+0x7a>
		}
		else if (temp != setupcrccheck){
     a00:	90 91 82 20 	lds	r25, 0x2082	; 0x802082 <temp>
     a04:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end>
     a08:	98 17       	cp	r25, r24
     a0a:	31 f0       	breq	.+12     	; 0xa18 <LAST_COMMAND+0x72>
			LOAD_SETUPS_BLOCK();
     a0c:	0e 94 13 05 	call	0xa26	; 0xa26 <LOAD_SETUPS_BLOCK>
			crccheckflag = 0x01;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <crccheckflag>
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <LAST_COMMAND+0x7a>
		}
		else{
			loop_process = key_detect;
     a18:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <key_detect>
     a1c:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
		}
	}
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <LOAD_SETUPS_BLOCK>:

void LOAD_SETUPS_BLOCK(void)  //see datasheet for values.  setups block configured earlier in main.
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
		COMMAND(enter_setups_mode);
     a2e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <enter_setups_mode>
     a32:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		COMMAND(enter_setups_mode);
     a36:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <enter_setups_mode>
     a3a:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		COMMAND(null_command);
     a3e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     a42:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		for(i=0; i<100; i++){
     a46:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <i>
     a4a:	13 c0       	rjmp	.+38     	; 0xa72 <LOAD_SETUPS_BLOCK+0x4c>
			COMMAND(*(setupsblock + i));
     a4c:	20 91 83 20 	lds	r18, 0x2083	; 0x802083 <setupsblock>
     a50:	30 91 84 20 	lds	r19, 0x2084	; 0x802084 <setupsblock+0x1>
     a54:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <i>
     a58:	88 2f       	mov	r24, r24
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	82 0f       	add	r24, r18
     a5e:	93 1f       	adc	r25, r19
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
void LOAD_SETUPS_BLOCK(void)  //see datasheet for values.  setups block configured earlier in main.
{
		COMMAND(enter_setups_mode);
		COMMAND(enter_setups_mode);
		COMMAND(null_command);
		for(i=0; i<100; i++){
     a68:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <i>
     a6c:	8f 5f       	subi	r24, 0xFF	; 255
     a6e:	80 93 85 20 	sts	0x2085, r24	; 0x802085 <i>
     a72:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <i>
     a76:	84 36       	cpi	r24, 0x64	; 100
     a78:	48 f3       	brcs	.-46     	; 0xa4c <LOAD_SETUPS_BLOCK+0x26>
			COMMAND(*(setupsblock + i));
		}
		COMMAND(crccheck);
     a7a:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
     a7e:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		COMMAND(null_command);
     a82:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     a86:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		COMMAND(restart_ic);
     a8a:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <restart_ic>
     a8e:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <KEY_CHECK>:

void KEY_CHECK(void)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	2e 97       	sbiw	r28, 0x0e	; 14
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	de bf       	out	0x3e, r29	; 62
	if(loop_process == key_detect){
     aa6:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <loop_process>
     aaa:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <key_detect>
     aae:	98 17       	cp	r25, r24
     ab0:	09 f0       	breq	.+2      	; 0xab4 <KEY_CHECK+0x1c>
     ab2:	ce c0       	rjmp	.+412    	; 0xc50 <KEY_CHECK+0x1b8>
		PORTB.OUT = 0X02;
     ab4:	80 e2       	ldi	r24, 0x20	; 32
     ab6:	96 e0       	ldi	r25, 0x06	; 6
     ab8:	22 e0       	ldi	r18, 0x02	; 2
     aba:	fc 01       	movw	r30, r24
     abc:	24 83       	std	Z+4, r18	; 0x04
		COMMAND(report_first_key);
     abe:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <report_first_key>
     ac2:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		COMMAND(null_command);
     ac6:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     aca:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		temp = X;
     ace:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     ad2:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <temp>
		COMMAND(null_command);
     ad6:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     ada:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		crcout = eight_bit_crc(0x00, report_first_key);
     ade:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <report_first_key>
     ae2:	68 2f       	mov	r22, r24
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
     aea:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
		crccheck = crcout;
     aee:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
     af2:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
		crcout = eight_bit_crc(crccheck, temp);
     af6:	90 91 82 20 	lds	r25, 0x2082	; 0x802082 <temp>
     afa:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
     afe:	69 2f       	mov	r22, r25
     b00:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
     b04:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
		if(crcout != X){
     b08:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <crcout>
     b0c:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     b10:	98 17       	cp	r25, r24
     b12:	29 f0       	breq	.+10     	; 0xb1e <KEY_CHECK+0x86>
			loop_process = error_handle;
     b14:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
     b18:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
     b1c:	99 c0       	rjmp	.+306    	; 0xc50 <KEY_CHECK+0x1b8>
		}
		else if((temp & 0x40) == 0x40){
     b1e:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	80 74       	andi	r24, 0x40	; 64
     b28:	99 27       	eor	r25, r25
     b2a:	89 2b       	or	r24, r25
     b2c:	29 f0       	breq	.+10     	; 0xb38 <KEY_CHECK+0xa0>
			loop_process = get_status;
     b2e:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <get_status>
     b32:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
     b36:	8c c0       	rjmp	.+280    	; 0xc50 <KEY_CHECK+0x1b8>
		}
		else if((temp & 0x9F) == 0x1F){
     b38:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
     b3c:	88 2f       	mov	r24, r24
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	8f 79       	andi	r24, 0x9F	; 159
     b42:	99 27       	eor	r25, r25
     b44:	4f 97       	sbiw	r24, 0x1f	; 31
     b46:	09 f0       	breq	.+2      	; 0xb4a <KEY_CHECK+0xb2>
     b48:	7f c0       	rjmp	.+254    	; 0xc48 <KEY_CHECK+0x1b0>
			PORTA.OUT = 0x00;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	96 e0       	ldi	r25, 0x06	; 6
     b4e:	fc 01       	movw	r30, r24
     b50:	14 82       	std	Z+4, r1	; 0x04
			PORTD.OUT = 0x00;
     b52:	80 e6       	ldi	r24, 0x60	; 96
     b54:	96 e0       	ldi	r25, 0x06	; 6
     b56:	fc 01       	movw	r30, r24
     b58:	14 82       	std	Z+4, r1	; 0x04
			PORTF.OUT = 0x00;
     b5a:	80 ea       	ldi	r24, 0xA0	; 160
     b5c:	96 e0       	ldi	r25, 0x06	; 6
     b5e:	fc 01       	movw	r30, r24
     b60:	14 82       	std	Z+4, r1	; 0x04
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e2       	ldi	r26, 0x20	; 32
     b68:	b1 e4       	ldi	r27, 0x41	; 65
     b6a:	89 83       	std	Y+1, r24	; 0x01
     b6c:	9a 83       	std	Y+2, r25	; 0x02
     b6e:	ab 83       	std	Y+3, r26	; 0x03
     b70:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	4a ef       	ldi	r20, 0xFA	; 250
     b78:	53 e4       	ldi	r21, 0x43	; 67
     b7a:	69 81       	ldd	r22, Y+1	; 0x01
     b7c:	7a 81       	ldd	r23, Y+2	; 0x02
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	9e 83       	std	Y+6, r25	; 0x06
     b8e:	af 83       	std	Y+7, r26	; 0x07
     b90:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e8       	ldi	r20, 0x80	; 128
     b98:	5f e3       	ldi	r21, 0x3F	; 63
     b9a:	6d 81       	ldd	r22, Y+5	; 0x05
     b9c:	7e 81       	ldd	r23, Y+6	; 0x06
     b9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ba0:	98 85       	ldd	r25, Y+8	; 0x08
     ba2:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     ba6:	88 23       	and	r24, r24
     ba8:	2c f4       	brge	.+10     	; 0xbb4 <KEY_CHECK+0x11c>
		__ticks = 1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	89 87       	std	Y+9, r24	; 0x09
     bb0:	9a 87       	std	Y+10, r25	; 0x0a
     bb2:	3f c0       	rjmp	.+126    	; 0xc32 <KEY_CHECK+0x19a>
	else if (__tmp > 65535)
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	3f ef       	ldi	r19, 0xFF	; 255
     bb8:	4f e7       	ldi	r20, 0x7F	; 127
     bba:	57 e4       	ldi	r21, 0x47	; 71
     bbc:	6d 81       	ldd	r22, Y+5	; 0x05
     bbe:	7e 81       	ldd	r23, Y+6	; 0x06
     bc0:	8f 81       	ldd	r24, Y+7	; 0x07
     bc2:	98 85       	ldd	r25, Y+8	; 0x08
     bc4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     bc8:	18 16       	cp	r1, r24
     bca:	4c f5       	brge	.+82     	; 0xc1e <KEY_CHECK+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e2       	ldi	r20, 0x20	; 32
     bd2:	51 e4       	ldi	r21, 0x41	; 65
     bd4:	69 81       	ldd	r22, Y+1	; 0x01
     bd6:	7a 81       	ldd	r23, Y+2	; 0x02
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	bc 01       	movw	r22, r24
     be6:	cd 01       	movw	r24, r26
     be8:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	89 87       	std	Y+9, r24	; 0x09
     bf2:	9a 87       	std	Y+10, r25	; 0x0a
     bf4:	0f c0       	rjmp	.+30     	; 0xc14 <KEY_CHECK+0x17c>
     bf6:	82 e3       	ldi	r24, 0x32	; 50
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	8b 87       	std	Y+11, r24	; 0x0b
     bfc:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
     c00:	9c 85       	ldd	r25, Y+12	; 0x0c
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <KEY_CHECK+0x16a>
     c06:	8b 87       	std	Y+11, r24	; 0x0b
     c08:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	89 87       	std	Y+9, r24	; 0x09
     c12:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	89 2b       	or	r24, r25
     c1a:	69 f7       	brne	.-38     	; 0xbf6 <KEY_CHECK+0x15e>
     c1c:	19 c0       	rjmp	.+50     	; 0xc50 <KEY_CHECK+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1e:	6d 81       	ldd	r22, Y+5	; 0x05
     c20:	7e 81       	ldd	r23, Y+6	; 0x06
     c22:	8f 81       	ldd	r24, Y+7	; 0x07
     c24:	98 85       	ldd	r25, Y+8	; 0x08
     c26:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	89 87       	std	Y+9, r24	; 0x09
     c30:	9a 87       	std	Y+10, r25	; 0x0a
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	8d 87       	std	Y+13, r24	; 0x0d
     c38:	9e 87       	std	Y+14, r25	; 0x0e
     c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <KEY_CHECK+0x1a6>
     c42:	8d 87       	std	Y+13, r24	; 0x0d
     c44:	9e 87       	std	Y+14, r25	; 0x0e
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <KEY_CHECK+0x1b8>
			_delay_ms(10);
		}
		else{
			loop_process = key_report;
     c48:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <key_report>
     c4c:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
		}
		
	}
}
     c50:	2e 96       	adiw	r28, 0x0e	; 14
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <DETECT_REPORT>:

void DETECT_REPORT(void)
{
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	6c 97       	sbiw	r28, 0x1c	; 28
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	de bf       	out	0x3e, r29	; 62
	if(loop_process == key_report){
     c6a:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <loop_process>
     c6e:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <key_report>
     c72:	98 17       	cp	r25, r24
     c74:	09 f0       	breq	.+2      	; 0xc78 <DETECT_REPORT+0x1c>
     c76:	b1 c1       	rjmp	.+866    	; 0xfda <DETECT_REPORT+0x37e>
		if((temp & 0x80) != 0x80){
     c78:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
     c7c:	88 23       	and	r24, r24
     c7e:	0c f4       	brge	.+2      	; 0xc82 <DETECT_REPORT+0x26>
     c80:	ca c0       	rjmp	.+404    	; 0xe16 <DETECT_REPORT+0x1ba>
			key_location = temp & 0x1F;
     c82:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
     c86:	8f 71       	andi	r24, 0x1F	; 31
     c88:	80 93 15 20 	sts	0x2015, r24	; 0x802015 <key_location>
			Y = 1 << key_location;
     c8c:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <key_location>
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <DETECT_REPORT+0x42>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	2a 95       	dec	r18
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <DETECT_REPORT+0x3e>
     ca2:	09 2e       	mov	r0, r25
     ca4:	00 0c       	add	r0, r0
     ca6:	aa 0b       	sbc	r26, r26
     ca8:	bb 0b       	sbc	r27, r27
     caa:	80 93 19 20 	sts	0x2019, r24	; 0x802019 <Y>
     cae:	90 93 1a 20 	sts	0x201A, r25	; 0x80201a <Y+0x1>
     cb2:	a0 93 1b 20 	sts	0x201B, r26	; 0x80201b <Y+0x2>
     cb6:	b0 93 1c 20 	sts	0x201C, r27	; 0x80201c <Y+0x3>
			Y0 = Y;
     cba:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <Y>
     cbe:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <Y+0x1>
     cc2:	a0 91 1b 20 	lds	r26, 0x201B	; 0x80201b <Y+0x2>
     cc6:	b0 91 1c 20 	lds	r27, 0x201C	; 0x80201c <Y+0x3>
     cca:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <Y0>
			Y1 = Y>>8;
     cce:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <Y>
     cd2:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <Y+0x1>
     cd6:	a0 91 1b 20 	lds	r26, 0x201B	; 0x80201b <Y+0x2>
     cda:	b0 91 1c 20 	lds	r27, 0x201C	; 0x80201c <Y+0x3>
     cde:	89 2f       	mov	r24, r25
     ce0:	9a 2f       	mov	r25, r26
     ce2:	ab 2f       	mov	r26, r27
     ce4:	bb 27       	eor	r27, r27
     ce6:	80 93 17 20 	sts	0x2017, r24	; 0x802017 <Y1>
			Y2 = Y>>16; 
     cea:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <Y>
     cee:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <Y+0x1>
     cf2:	a0 91 1b 20 	lds	r26, 0x201B	; 0x80201b <Y+0x2>
     cf6:	b0 91 1c 20 	lds	r27, 0x201C	; 0x80201c <Y+0x3>
     cfa:	cd 01       	movw	r24, r26
     cfc:	aa 27       	eor	r26, r26
     cfe:	bb 27       	eor	r27, r27
     d00:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <Y2>
			PORTA.OUT = Y0;
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	96 e0       	ldi	r25, 0x06	; 6
     d08:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <Y0>
     d0c:	fc 01       	movw	r30, r24
     d0e:	24 83       	std	Z+4, r18	; 0x04
			PORTF.OUT = Y1;
     d10:	80 ea       	ldi	r24, 0xA0	; 160
     d12:	96 e0       	ldi	r25, 0x06	; 6
     d14:	20 91 17 20 	lds	r18, 0x2017	; 0x802017 <Y1>
     d18:	fc 01       	movw	r30, r24
     d1a:	24 83       	std	Z+4, r18	; 0x04
			PORTD.OUT = Y2;
     d1c:	80 e6       	ldi	r24, 0x60	; 96
     d1e:	96 e0       	ldi	r25, 0x06	; 6
     d20:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <Y2>
     d24:	fc 01       	movw	r30, r24
     d26:	24 83       	std	Z+4, r18	; 0x04
			loop_process = key_detect;
     d28:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <key_detect>
     d2c:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a0 e2       	ldi	r26, 0x20	; 32
     d36:	b1 e4       	ldi	r27, 0x41	; 65
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	ab 83       	std	Y+3, r26	; 0x03
     d3e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a ef       	ldi	r20, 0xFA	; 250
     d46:	53 e4       	ldi	r21, 0x43	; 67
     d48:	69 81       	ldd	r22, Y+1	; 0x01
     d4a:	7a 81       	ldd	r23, Y+2	; 0x02
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	af 83       	std	Y+7, r26	; 0x07
     d5e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	6d 81       	ldd	r22, Y+5	; 0x05
     d6a:	7e 81       	ldd	r23, Y+6	; 0x06
     d6c:	8f 81       	ldd	r24, Y+7	; 0x07
     d6e:	98 85       	ldd	r25, Y+8	; 0x08
     d70:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     d74:	88 23       	and	r24, r24
     d76:	2c f4       	brge	.+10     	; 0xd82 <DETECT_REPORT+0x126>
		__ticks = 1;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	89 87       	std	Y+9, r24	; 0x09
     d7e:	9a 87       	std	Y+10, r25	; 0x0a
     d80:	3f c0       	rjmp	.+126    	; 0xe00 <DETECT_REPORT+0x1a4>
	else if (__tmp > 65535)
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	6d 81       	ldd	r22, Y+5	; 0x05
     d8c:	7e 81       	ldd	r23, Y+6	; 0x06
     d8e:	8f 81       	ldd	r24, Y+7	; 0x07
     d90:	98 85       	ldd	r25, Y+8	; 0x08
     d92:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     d96:	18 16       	cp	r1, r24
     d98:	4c f5       	brge	.+82     	; 0xdec <DETECT_REPORT+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	69 81       	ldd	r22, Y+1	; 0x01
     da4:	7a 81       	ldd	r23, Y+2	; 0x02
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	bc 01       	movw	r22, r24
     db4:	cd 01       	movw	r24, r26
     db6:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	89 87       	std	Y+9, r24	; 0x09
     dc0:	9a 87       	std	Y+10, r25	; 0x0a
     dc2:	0f c0       	rjmp	.+30     	; 0xde2 <DETECT_REPORT+0x186>
     dc4:	82 e3       	ldi	r24, 0x32	; 50
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	8b 87       	std	Y+11, r24	; 0x0b
     dca:	9c 87       	std	Y+12, r25	; 0x0c
     dcc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dce:	9c 85       	ldd	r25, Y+12	; 0x0c
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <DETECT_REPORT+0x174>
     dd4:	8b 87       	std	Y+11, r24	; 0x0b
     dd6:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
     dda:	9a 85       	ldd	r25, Y+10	; 0x0a
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	89 87       	std	Y+9, r24	; 0x09
     de0:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	89 2b       	or	r24, r25
     de8:	69 f7       	brne	.-38     	; 0xdc4 <DETECT_REPORT+0x168>
     dea:	f7 c0       	rjmp	.+494    	; 0xfda <DETECT_REPORT+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dec:	6d 81       	ldd	r22, Y+5	; 0x05
     dee:	7e 81       	ldd	r23, Y+6	; 0x06
     df0:	8f 81       	ldd	r24, Y+7	; 0x07
     df2:	98 85       	ldd	r25, Y+8	; 0x08
     df4:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	89 87       	std	Y+9, r24	; 0x09
     dfe:	9a 87       	std	Y+10, r25	; 0x0a
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	8d 87       	std	Y+13, r24	; 0x0d
     e06:	9e 87       	std	Y+14, r25	; 0x0e
     e08:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <DETECT_REPORT+0x1b0>
     e10:	8d 87       	std	Y+13, r24	; 0x0d
     e12:	9e 87       	std	Y+14, r25	; 0x0e
     e14:	e2 c0       	rjmp	.+452    	; 0xfda <DETECT_REPORT+0x37e>
			_delay_ms(10);
		}
		else{
			COMMAND(report_all_keys);
     e16:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <report_all_keys>
     e1a:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			COMMAND(null_command);
     e1e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     e22:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			Y0 = X;
     e26:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     e2a:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <Y0>
			COMMAND(null_command);
     e2e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     e32:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			Y1 = X;
     e36:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     e3a:	80 93 17 20 	sts	0x2017, r24	; 0x802017 <Y1>
			COMMAND(null_command);
     e3e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     e42:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			Y2 = X;
     e46:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     e4a:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <Y2>
			COMMAND(null_command);
     e4e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
     e52:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			crcout = eight_bit_crc(0x00, report_all_keys);
     e56:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <report_all_keys>
     e5a:	68 2f       	mov	r22, r24
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
     e62:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
     e66:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
     e6a:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			crcout = eight_bit_crc(crccheck, Y0);
     e6e:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <Y0>
     e72:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
     e76:	69 2f       	mov	r22, r25
     e78:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
     e7c:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
     e80:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
     e84:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			crcout = eight_bit_crc(crccheck, Y1);
     e88:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <Y1>
     e8c:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
     e90:	69 2f       	mov	r22, r25
     e92:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
     e96:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
     e9a:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
     e9e:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			crcout = eight_bit_crc(crccheck, Y2);
     ea2:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <Y2>
     ea6:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
     eaa:	69 2f       	mov	r22, r25
     eac:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
     eb0:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			if(crcout != X){
     eb4:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <crcout>
     eb8:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
     ebc:	98 17       	cp	r25, r24
     ebe:	29 f0       	breq	.+10     	; 0xeca <DETECT_REPORT+0x26e>
				loop_process = error_handle;
     ec0:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
     ec4:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
     ec8:	88 c0       	rjmp	.+272    	; 0xfda <DETECT_REPORT+0x37e>
			}
			else{
				PORTA.OUT = Y0;
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <Y0>
     ed2:	fc 01       	movw	r30, r24
     ed4:	24 83       	std	Z+4, r18	; 0x04
				PORTF.OUT = Y1;
     ed6:	80 ea       	ldi	r24, 0xA0	; 160
     ed8:	96 e0       	ldi	r25, 0x06	; 6
     eda:	20 91 17 20 	lds	r18, 0x2017	; 0x802017 <Y1>
     ede:	fc 01       	movw	r30, r24
     ee0:	24 83       	std	Z+4, r18	; 0x04
				PORTD.OUT = Y2;
     ee2:	80 e6       	ldi	r24, 0x60	; 96
     ee4:	96 e0       	ldi	r25, 0x06	; 6
     ee6:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <Y2>
     eea:	fc 01       	movw	r30, r24
     eec:	24 83       	std	Z+4, r18	; 0x04
				loop_process = key_detect;
     eee:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <key_detect>
     ef2:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a0 e2       	ldi	r26, 0x20	; 32
     efc:	b1 e4       	ldi	r27, 0x41	; 65
     efe:	8f 87       	std	Y+15, r24	; 0x0f
     f00:	98 8b       	std	Y+16, r25	; 0x10
     f02:	a9 8b       	std	Y+17, r26	; 0x11
     f04:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	4a ef       	ldi	r20, 0xFA	; 250
     f0c:	53 e4       	ldi	r21, 0x43	; 67
     f0e:	6f 85       	ldd	r22, Y+15	; 0x0f
     f10:	78 89       	ldd	r23, Y+16	; 0x10
     f12:	89 89       	ldd	r24, Y+17	; 0x11
     f14:	9a 89       	ldd	r25, Y+18	; 0x12
     f16:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8b 8b       	std	Y+19, r24	; 0x13
     f20:	9c 8b       	std	Y+20, r25	; 0x14
     f22:	ad 8b       	std	Y+21, r26	; 0x15
     f24:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	6b 89       	ldd	r22, Y+19	; 0x13
     f30:	7c 89       	ldd	r23, Y+20	; 0x14
     f32:	8d 89       	ldd	r24, Y+21	; 0x15
     f34:	9e 89       	ldd	r25, Y+22	; 0x16
     f36:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <DETECT_REPORT+0x2ec>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	8f 8b       	std	Y+23, r24	; 0x17
     f44:	98 8f       	std	Y+24, r25	; 0x18
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <DETECT_REPORT+0x36a>
	else if (__tmp > 65535)
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	3f ef       	ldi	r19, 0xFF	; 255
     f4c:	4f e7       	ldi	r20, 0x7F	; 127
     f4e:	57 e4       	ldi	r21, 0x47	; 71
     f50:	6b 89       	ldd	r22, Y+19	; 0x13
     f52:	7c 89       	ldd	r23, Y+20	; 0x14
     f54:	8d 89       	ldd	r24, Y+21	; 0x15
     f56:	9e 89       	ldd	r25, Y+22	; 0x16
     f58:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <DETECT_REPORT+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	6f 85       	ldd	r22, Y+15	; 0x0f
     f6a:	78 89       	ldd	r23, Y+16	; 0x10
     f6c:	89 89       	ldd	r24, Y+17	; 0x11
     f6e:	9a 89       	ldd	r25, Y+18	; 0x12
     f70:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8f 8b       	std	Y+23, r24	; 0x17
     f86:	98 8f       	std	Y+24, r25	; 0x18
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <DETECT_REPORT+0x34c>
     f8a:	82 e3       	ldi	r24, 0x32	; 50
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	89 8f       	std	Y+25, r24	; 0x19
     f90:	9a 8f       	std	Y+26, r25	; 0x1a
     f92:	89 8d       	ldd	r24, Y+25	; 0x19
     f94:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <DETECT_REPORT+0x33a>
     f9a:	89 8f       	std	Y+25, r24	; 0x19
     f9c:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	8f 89       	ldd	r24, Y+23	; 0x17
     fa0:	98 8d       	ldd	r25, Y+24	; 0x18
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	8f 8b       	std	Y+23, r24	; 0x17
     fa6:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	8f 89       	ldd	r24, Y+23	; 0x17
     faa:	98 8d       	ldd	r25, Y+24	; 0x18
     fac:	89 2b       	or	r24, r25
     fae:	69 f7       	brne	.-38     	; 0xf8a <DETECT_REPORT+0x32e>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <DETECT_REPORT+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	6b 89       	ldd	r22, Y+19	; 0x13
     fb4:	7c 89       	ldd	r23, Y+20	; 0x14
     fb6:	8d 89       	ldd	r24, Y+21	; 0x15
     fb8:	9e 89       	ldd	r25, Y+22	; 0x16
     fba:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	8f 8b       	std	Y+23, r24	; 0x17
     fc4:	98 8f       	std	Y+24, r25	; 0x18
     fc6:	8f 89       	ldd	r24, Y+23	; 0x17
     fc8:	98 8d       	ldd	r25, Y+24	; 0x18
     fca:	8b 8f       	std	Y+27, r24	; 0x1b
     fcc:	9c 8f       	std	Y+28, r25	; 0x1c
     fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <DETECT_REPORT+0x376>
     fd6:	8b 8f       	std	Y+27, r24	; 0x1b
     fd8:	9c 8f       	std	Y+28, r25	; 0x1c
				_delay_ms(10);
			}
		}
	}
}
     fda:	6c 96       	adiw	r28, 0x1c	; 28
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <STATUS_CHECK>:

void STATUS_CHECK(void)
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	2e 97       	sbiw	r28, 0x0e	; 14
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	de bf       	out	0x3e, r29	; 62
	if(loop_process == get_status){
     ff4:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <loop_process>
     ff8:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <get_status>
     ffc:	98 17       	cp	r25, r24
     ffe:	09 f0       	breq	.+2      	; 0x1002 <STATUS_CHECK+0x1c>
    1000:	ca c0       	rjmp	.+404    	; 0x1196 <STATUS_CHECK+0x1b0>
		COMMAND(general_status);
    1002:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <general_status>
    1006:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		COMMAND(null_command);
    100a:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
    100e:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		temp = X;
    1012:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
    1016:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <temp>
		COMMAND(null_command);
    101a:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
    101e:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		crcout = eight_bit_crc(0x00, general_status);
    1022:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <general_status>
    1026:	68 2f       	mov	r22, r24
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    102e:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
		crccheck = crcout;
    1032:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    1036:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
		crcout = eight_bit_crc(crccheck, temp);
    103a:	90 91 82 20 	lds	r25, 0x2082	; 0x802082 <temp>
    103e:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
    1042:	69 2f       	mov	r22, r25
    1044:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    1048:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
		if(crcout != X){
    104c:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <crcout>
    1050:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <X>
    1054:	98 17       	cp	r25, r24
    1056:	29 f0       	breq	.+10     	; 0x1062 <STATUS_CHECK+0x7c>
			loop_process = error_handle;
    1058:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
    105c:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
    1060:	9a c0       	rjmp	.+308    	; 0x1196 <STATUS_CHECK+0x1b0>
		}
		else if((temp & 0x64) == 0x40){
    1062:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	84 76       	andi	r24, 0x64	; 100
    106c:	99 27       	eor	r25, r25
    106e:	80 34       	cpi	r24, 0x40	; 64
    1070:	91 05       	cpc	r25, r1
    1072:	71 f4       	brne	.+28     	; 0x1090 <STATUS_CHECK+0xaa>
			while (temp != 0xF0)
    1074:	04 c0       	rjmp	.+8      	; 0x107e <STATUS_CHECK+0x98>
			{
				COMMAND(last_command);
    1076:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    107a:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
		crcout = eight_bit_crc(crccheck, temp);
		if(crcout != X){
			loop_process = error_handle;
		}
		else if((temp & 0x64) == 0x40){
			while (temp != 0xF0)
    107e:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
    1082:	80 3f       	cpi	r24, 0xF0	; 240
    1084:	c1 f7       	brne	.-16     	; 0x1076 <STATUS_CHECK+0x90>
			{
				COMMAND(last_command);
			}
			loop_process = key_detect;
    1086:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <key_detect>
    108a:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
    108e:	83 c0       	rjmp	.+262    	; 0x1196 <STATUS_CHECK+0x1b0>
		}
		else if((temp & 0x64)!= 0x00){
    1090:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	84 76       	andi	r24, 0x64	; 100
    109a:	99 27       	eor	r25, r25
    109c:	89 2b       	or	r24, r25
    109e:	29 f0       	breq	.+10     	; 0x10aa <STATUS_CHECK+0xc4>
			loop_process = error_handle;
    10a0:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
    10a4:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
    10a8:	76 c0       	rjmp	.+236    	; 0x1196 <STATUS_CHECK+0x1b0>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e2       	ldi	r26, 0x20	; 32
    10b0:	b1 e4       	ldi	r27, 0x41	; 65
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	ab 83       	std	Y+3, r26	; 0x03
    10b8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a ef       	ldi	r20, 0xFA	; 250
    10c0:	53 e4       	ldi	r21, 0x43	; 67
    10c2:	69 81       	ldd	r22, Y+1	; 0x01
    10c4:	7a 81       	ldd	r23, Y+2	; 0x02
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	af 83       	std	Y+7, r26	; 0x07
    10d8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e8       	ldi	r20, 0x80	; 128
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	6d 81       	ldd	r22, Y+5	; 0x05
    10e4:	7e 81       	ldd	r23, Y+6	; 0x06
    10e6:	8f 81       	ldd	r24, Y+7	; 0x07
    10e8:	98 85       	ldd	r25, Y+8	; 0x08
    10ea:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <STATUS_CHECK+0x116>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	89 87       	std	Y+9, r24	; 0x09
    10f8:	9a 87       	std	Y+10, r25	; 0x0a
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <STATUS_CHECK+0x194>
	else if (__tmp > 65535)
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	3f ef       	ldi	r19, 0xFF	; 255
    1100:	4f e7       	ldi	r20, 0x7F	; 127
    1102:	57 e4       	ldi	r21, 0x47	; 71
    1104:	6d 81       	ldd	r22, Y+5	; 0x05
    1106:	7e 81       	ldd	r23, Y+6	; 0x06
    1108:	8f 81       	ldd	r24, Y+7	; 0x07
    110a:	98 85       	ldd	r25, Y+8	; 0x08
    110c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__gesf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <STATUS_CHECK+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	69 81       	ldd	r22, Y+1	; 0x01
    111e:	7a 81       	ldd	r23, Y+2	; 0x02
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	89 87       	std	Y+9, r24	; 0x09
    113a:	9a 87       	std	Y+10, r25	; 0x0a
    113c:	0f c0       	rjmp	.+30     	; 0x115c <STATUS_CHECK+0x176>
    113e:	82 e3       	ldi	r24, 0x32	; 50
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	8b 87       	std	Y+11, r24	; 0x0b
    1144:	9c 87       	std	Y+12, r25	; 0x0c
    1146:	8b 85       	ldd	r24, Y+11	; 0x0b
    1148:	9c 85       	ldd	r25, Y+12	; 0x0c
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <STATUS_CHECK+0x164>
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	89 87       	std	Y+9, r24	; 0x09
    115a:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	89 2b       	or	r24, r25
    1162:	69 f7       	brne	.-38     	; 0x113e <STATUS_CHECK+0x158>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <STATUS_CHECK+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	6d 81       	ldd	r22, Y+5	; 0x05
    1168:	7e 81       	ldd	r23, Y+6	; 0x06
    116a:	8f 81       	ldd	r24, Y+7	; 0x07
    116c:	98 85       	ldd	r25, Y+8	; 0x08
    116e:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	89 87       	std	Y+9, r24	; 0x09
    1178:	9a 87       	std	Y+10, r25	; 0x0a
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	8d 87       	std	Y+13, r24	; 0x0d
    1180:	9e 87       	std	Y+14, r25	; 0x0e
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <STATUS_CHECK+0x1a0>
    118a:	8d 87       	std	Y+13, r24	; 0x0d
    118c:	9e 87       	std	Y+14, r25	; 0x0e
		}
		else{
			_delay_ms(10);
			loop_process = key_detect;
    118e:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <key_detect>
    1192:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
		}
	}
}
    1196:	2e 96       	adiw	r28, 0x0e	; 14
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <ERROR>:

void ERROR(void)
{
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	if(loop_process == error_handle){
    11aa:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <loop_process>
    11ae:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
    11b2:	98 17       	cp	r25, r24
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <ERROR+0x16>
    11b6:	d3 c0       	rjmp	.+422    	; 0x135e <ERROR+0x1bc>
		crccheckflag = 0x00;
    11b8:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <crccheckflag>
		if((temp & 0x20)==0x20){
    11bc:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	80 72       	andi	r24, 0x20	; 32
    11c6:	99 27       	eor	r25, r25
    11c8:	89 2b       	or	r24, r25
    11ca:	d1 f1       	breq	.+116    	; 0x1240 <ERROR+0x9e>
			PORTB.OUT = 0x01;
    11cc:	80 e2       	ldi	r24, 0x20	; 32
    11ce:	96 e0       	ldi	r25, 0x06	; 6
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	fc 01       	movw	r30, r24
    11d4:	24 83       	std	Z+4, r18	; 0x04
			COMMAND(fmea_status);
    11d6:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <fmea_status>
    11da:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			COMMAND(null_command);
    11de:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
    11e2:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			crcout = eight_bit_crc(0x00, fmea_status);
    11e6:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <fmea_status>
    11ea:	68 2f       	mov	r22, r24
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    11f2:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
    11f6:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    11fa:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			crcout = eight_bit_crc(crccheck, X);
    11fe:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <X>
    1202:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
    1206:	69 2f       	mov	r22, r25
    1208:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    120c:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			if(crcout != SPIC.DATA){
    1210:	80 ec       	ldi	r24, 0xC0	; 192
    1212:	98 e0       	ldi	r25, 0x08	; 8
    1214:	fc 01       	movw	r30, r24
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    121c:	98 17       	cp	r25, r24
    121e:	29 f0       	breq	.+10     	; 0x122a <ERROR+0x88>
				loop_process = error_handle;
    1220:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
    1224:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
    1228:	9a c0       	rjmp	.+308    	; 0x135e <ERROR+0x1bc>
			}
			else{
				PORTD.OUT = X;
    122a:	80 e6       	ldi	r24, 0x60	; 96
    122c:	96 e0       	ldi	r25, 0x06	; 6
    122e:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <X>
    1232:	fc 01       	movw	r30, r24
    1234:	24 83       	std	Z+4, r18	; 0x04
				loop_process = get_status;
    1236:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <get_status>
    123a:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
    123e:	8f c0       	rjmp	.+286    	; 0x135e <ERROR+0x1bc>
			}
		}
		else if((temp & 0x04) == 0x04){
    1240:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <temp>
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	84 70       	andi	r24, 0x04	; 4
    124a:	99 27       	eor	r25, r25
    124c:	89 2b       	or	r24, r25
    124e:	09 f4       	brne	.+2      	; 0x1252 <ERROR+0xb0>
    1250:	82 c0       	rjmp	.+260    	; 0x1356 <ERROR+0x1b4>
			PORTB.OUT = 0x02;
    1252:	80 e2       	ldi	r24, 0x20	; 32
    1254:	96 e0       	ldi	r25, 0x06	; 6
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	fc 01       	movw	r30, r24
    125a:	24 83       	std	Z+4, r18	; 0x04
			COMMAND(key_status);
    125c:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <key_status>
    1260:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			COMMAND(null_command);
    1264:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
    1268:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			Y0 = SPIC.DATA;
    126c:	80 ec       	ldi	r24, 0xC0	; 192
    126e:	98 e0       	ldi	r25, 0x08	; 8
    1270:	fc 01       	movw	r30, r24
    1272:	83 81       	ldd	r24, Z+3	; 0x03
    1274:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <Y0>
			COMMAND(null_command);
    1278:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
    127c:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			Y1 = SPIC.DATA;
    1280:	80 ec       	ldi	r24, 0xC0	; 192
    1282:	98 e0       	ldi	r25, 0x08	; 8
    1284:	fc 01       	movw	r30, r24
    1286:	83 81       	ldd	r24, Z+3	; 0x03
    1288:	80 93 17 20 	sts	0x2017, r24	; 0x802017 <Y1>
			COMMAND(null_command);
    128c:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
    1290:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			Y2 = SPIC.DATA;
    1294:	80 ec       	ldi	r24, 0xC0	; 192
    1296:	98 e0       	ldi	r25, 0x08	; 8
    1298:	fc 01       	movw	r30, r24
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <Y2>
			COMMAND(null_command);
    12a0:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <null_command>
    12a4:	0e 94 c6 03 	call	0x78c	; 0x78c <COMMAND>
			crcout = eight_bit_crc(0x00, key_status);
    12a8:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <key_status>
    12ac:	68 2f       	mov	r22, r24
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    12b4:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
    12b8:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    12bc:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			crcout = eight_bit_crc(crccheck, Y0);
    12c0:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <Y0>
    12c4:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
    12c8:	69 2f       	mov	r22, r25
    12ca:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    12ce:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
    12d2:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    12d6:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			crcout = eight_bit_crc(crccheck, Y1);
    12da:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <Y1>
    12de:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
    12e2:	69 2f       	mov	r22, r25
    12e4:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    12e8:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
    12ec:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    12f0:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			crcout = eight_bit_crc(crccheck, Y2);
    12f4:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <Y2>
    12f8:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <crccheck>
    12fc:	69 2f       	mov	r22, r25
    12fe:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    1302:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
			crccheck = crcout;
    1306:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    130a:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <crccheck>
			if(crcout != SPIC.DATA){
    130e:	80 ec       	ldi	r24, 0xC0	; 192
    1310:	98 e0       	ldi	r25, 0x08	; 8
    1312:	fc 01       	movw	r30, r24
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    131a:	98 17       	cp	r25, r24
    131c:	29 f0       	breq	.+10     	; 0x1328 <ERROR+0x186>
				loop_process = error_handle;
    131e:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <error_handle>
    1322:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
    1326:	1b c0       	rjmp	.+54     	; 0x135e <ERROR+0x1bc>
			}
			else{
				PORTA.OUT = Y0;
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	96 e0       	ldi	r25, 0x06	; 6
    132c:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <Y0>
    1330:	fc 01       	movw	r30, r24
    1332:	24 83       	std	Z+4, r18	; 0x04
				PORTF.OUT = Y1;
    1334:	80 ea       	ldi	r24, 0xA0	; 160
    1336:	96 e0       	ldi	r25, 0x06	; 6
    1338:	20 91 17 20 	lds	r18, 0x2017	; 0x802017 <Y1>
    133c:	fc 01       	movw	r30, r24
    133e:	24 83       	std	Z+4, r18	; 0x04
				PORTD.OUT = Y2;
    1340:	80 e6       	ldi	r24, 0x60	; 96
    1342:	96 e0       	ldi	r25, 0x06	; 6
    1344:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <Y2>
    1348:	fc 01       	movw	r30, r24
    134a:	24 83       	std	Z+4, r18	; 0x04
				loop_process = key_detect;
    134c:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <key_detect>
    1350:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
    1354:	04 c0       	rjmp	.+8      	; 0x135e <ERROR+0x1bc>
			}
		}
		else{
			loop_process = initialize;
    1356:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <initialize>
    135a:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
		}
	}
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <main>:

int main(void)
{
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
	setupsblock = setupsblockpopulate();
    136c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setupsblockpopulate>
    1370:	80 93 83 20 	sts	0x2083, r24	; 0x802083 <setupsblock>
    1374:	90 93 84 20 	sts	0x2084, r25	; 0x802084 <setupsblock+0x1>
	for(i=0; i<100; i++){
    1378:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <i>
    137c:	1c c0       	rjmp	.+56     	; 0x13b6 <main+0x52>
		crcout = eight_bit_crc(setupcrccheck, *(setupsblock + i));
    137e:	20 91 83 20 	lds	r18, 0x2083	; 0x802083 <setupsblock>
    1382:	30 91 84 20 	lds	r19, 0x2084	; 0x802084 <setupsblock+0x1>
    1386:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <i>
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	82 0f       	add	r24, r18
    1390:	93 1f       	adc	r25, r19
    1392:	fc 01       	movw	r30, r24
    1394:	90 81       	ld	r25, Z
    1396:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end>
    139a:	69 2f       	mov	r22, r25
    139c:	0e 94 4b 01 	call	0x296	; 0x296 <eight_bit_crc>
    13a0:	80 93 81 20 	sts	0x2081, r24	; 0x802081 <crcout>
		setupcrccheck = crcout;
    13a4:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <crcout>
    13a8:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
}

int main(void)
{
	setupsblock = setupsblockpopulate();
	for(i=0; i<100; i++){
    13ac:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <i>
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 85 20 	sts	0x2085, r24	; 0x802085 <i>
    13b6:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <i>
    13ba:	84 36       	cpi	r24, 0x64	; 100
    13bc:	00 f3       	brcs	.-64     	; 0x137e <main+0x1a>
		crcout = eight_bit_crc(setupcrccheck, *(setupsblock + i));
		setupcrccheck = crcout;
	}
	PORTA.DIR = 0xFF;
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	96 e0       	ldi	r25, 0x06	; 6
    13c2:	2f ef       	ldi	r18, 0xFF	; 255
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
	PORTB.DIR = 0xFF;
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	96 e0       	ldi	r25, 0x06	; 6
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
	PORTD.DIR = 0xFF;
    13d2:	80 e6       	ldi	r24, 0x60	; 96
    13d4:	96 e0       	ldi	r25, 0x06	; 6
    13d6:	2f ef       	ldi	r18, 0xFF	; 255
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
	PORTF.DIR = 0xFF;
    13dc:	80 ea       	ldi	r24, 0xA0	; 160
    13de:	96 e0       	ldi	r25, 0x06	; 6
    13e0:	2f ef       	ldi	r18, 0xFF	; 255
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
	PORTC.DIR = 0xB4;
    13e6:	80 e4       	ldi	r24, 0x40	; 64
    13e8:	96 e0       	ldi	r25, 0x06	; 6
    13ea:	24 eb       	ldi	r18, 0xB4	; 180
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
	PORTC.OUT |= 0x14;
    13f0:	80 e4       	ldi	r24, 0x40	; 64
    13f2:	96 e0       	ldi	r25, 0x06	; 6
    13f4:	20 e4       	ldi	r18, 0x40	; 64
    13f6:	36 e0       	ldi	r19, 0x06	; 6
    13f8:	f9 01       	movw	r30, r18
    13fa:	24 81       	ldd	r18, Z+4	; 0x04
    13fc:	24 61       	ori	r18, 0x14	; 20
    13fe:	fc 01       	movw	r30, r24
    1400:	24 83       	std	Z+4, r18	; 0x04
	SPIC0();
    1402:	0e 94 21 01 	call	0x242	; 0x242 <SPIC0>
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    1406:	80 ea       	ldi	r24, 0xA0	; 160
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	20 ea       	ldi	r18, 0xA0	; 160
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	f9 01       	movw	r30, r18
    1410:	22 81       	ldd	r18, Z+2	; 0x02
    1412:	24 60       	ori	r18, 0x04	; 4
    1414:	fc 01       	movw	r30, r24
    1416:	22 83       	std	Z+2, r18	; 0x02
	sei();
    1418:	78 94       	sei
	X = 0;
    141a:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <X>
	crccheckflag = 0;
    141e:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <crccheckflag>
	loop_process = initialize;
    1422:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <initialize>
    1426:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <loop_process>
	while(1){
		LAST_COMMAND();
    142a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LAST_COMMAND>
		KEY_CHECK();
    142e:	0e 94 4c 05 	call	0xa98	; 0xa98 <KEY_CHECK>
		DETECT_REPORT();
    1432:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DETECT_REPORT>
		STATUS_CHECK();
    1436:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <STATUS_CHECK>
		ERROR();
    143a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <ERROR>
	}
    143e:	f5 cf       	rjmp	.-22     	; 0x142a <main+0xc6>

00001440 <__cmpsf2>:
    1440:	0e 94 c6 0a 	call	0x158c	; 0x158c <__fp_cmp>
    1444:	08 f4       	brcc	.+2      	; 0x1448 <__cmpsf2+0x8>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	08 95       	ret

0000144a <__divsf3>:
    144a:	0e 94 39 0a 	call	0x1472	; 0x1472 <__divsf3x>
    144e:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_round>
    1452:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fp_pscB>
    1456:	58 f0       	brcs	.+22     	; 0x146e <__divsf3+0x24>
    1458:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__fp_pscA>
    145c:	40 f0       	brcs	.+16     	; 0x146e <__divsf3+0x24>
    145e:	29 f4       	brne	.+10     	; 0x146a <__divsf3+0x20>
    1460:	5f 3f       	cpi	r21, 0xFF	; 255
    1462:	29 f0       	breq	.+10     	; 0x146e <__divsf3+0x24>
    1464:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_inf>
    1468:	51 11       	cpse	r21, r1
    146a:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_szero>
    146e:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_nan>

00001472 <__divsf3x>:
    1472:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_split3>
    1476:	68 f3       	brcs	.-38     	; 0x1452 <__divsf3+0x8>

00001478 <__divsf3_pse>:
    1478:	99 23       	and	r25, r25
    147a:	b1 f3       	breq	.-20     	; 0x1468 <__divsf3+0x1e>
    147c:	55 23       	and	r21, r21
    147e:	91 f3       	breq	.-28     	; 0x1464 <__divsf3+0x1a>
    1480:	95 1b       	sub	r25, r21
    1482:	55 0b       	sbc	r21, r21
    1484:	bb 27       	eor	r27, r27
    1486:	aa 27       	eor	r26, r26
    1488:	62 17       	cp	r22, r18
    148a:	73 07       	cpc	r23, r19
    148c:	84 07       	cpc	r24, r20
    148e:	38 f0       	brcs	.+14     	; 0x149e <__divsf3_pse+0x26>
    1490:	9f 5f       	subi	r25, 0xFF	; 255
    1492:	5f 4f       	sbci	r21, 0xFF	; 255
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	44 1f       	adc	r20, r20
    149a:	aa 1f       	adc	r26, r26
    149c:	a9 f3       	breq	.-22     	; 0x1488 <__divsf3_pse+0x10>
    149e:	35 d0       	rcall	.+106    	; 0x150a <__divsf3_pse+0x92>
    14a0:	0e 2e       	mov	r0, r30
    14a2:	3a f0       	brmi	.+14     	; 0x14b2 <__divsf3_pse+0x3a>
    14a4:	e0 e8       	ldi	r30, 0x80	; 128
    14a6:	32 d0       	rcall	.+100    	; 0x150c <__divsf3_pse+0x94>
    14a8:	91 50       	subi	r25, 0x01	; 1
    14aa:	50 40       	sbci	r21, 0x00	; 0
    14ac:	e6 95       	lsr	r30
    14ae:	00 1c       	adc	r0, r0
    14b0:	ca f7       	brpl	.-14     	; 0x14a4 <__divsf3_pse+0x2c>
    14b2:	2b d0       	rcall	.+86     	; 0x150a <__divsf3_pse+0x92>
    14b4:	fe 2f       	mov	r31, r30
    14b6:	29 d0       	rcall	.+82     	; 0x150a <__divsf3_pse+0x92>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	88 1f       	adc	r24, r24
    14be:	bb 1f       	adc	r27, r27
    14c0:	26 17       	cp	r18, r22
    14c2:	37 07       	cpc	r19, r23
    14c4:	48 07       	cpc	r20, r24
    14c6:	ab 07       	cpc	r26, r27
    14c8:	b0 e8       	ldi	r27, 0x80	; 128
    14ca:	09 f0       	breq	.+2      	; 0x14ce <__divsf3_pse+0x56>
    14cc:	bb 0b       	sbc	r27, r27
    14ce:	80 2d       	mov	r24, r0
    14d0:	bf 01       	movw	r22, r30
    14d2:	ff 27       	eor	r31, r31
    14d4:	93 58       	subi	r25, 0x83	; 131
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	3a f0       	brmi	.+14     	; 0x14e8 <__divsf3_pse+0x70>
    14da:	9e 3f       	cpi	r25, 0xFE	; 254
    14dc:	51 05       	cpc	r21, r1
    14de:	78 f0       	brcs	.+30     	; 0x14fe <__divsf3_pse+0x86>
    14e0:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_inf>
    14e4:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_szero>
    14e8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ea:	e4 f3       	brlt	.-8      	; 0x14e4 <__divsf3_pse+0x6c>
    14ec:	98 3e       	cpi	r25, 0xE8	; 232
    14ee:	d4 f3       	brlt	.-12     	; 0x14e4 <__divsf3_pse+0x6c>
    14f0:	86 95       	lsr	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f7 95       	ror	r31
    14fa:	9f 5f       	subi	r25, 0xFF	; 255
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__divsf3_pse+0x78>
    14fe:	88 0f       	add	r24, r24
    1500:	91 1d       	adc	r25, r1
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	97 f9       	bld	r25, 7
    1508:	08 95       	ret
    150a:	e1 e0       	ldi	r30, 0x01	; 1
    150c:	66 0f       	add	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	bb 1f       	adc	r27, r27
    1514:	62 17       	cp	r22, r18
    1516:	73 07       	cpc	r23, r19
    1518:	84 07       	cpc	r24, r20
    151a:	ba 07       	cpc	r27, r26
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__divsf3_pse+0xae>
    151e:	62 1b       	sub	r22, r18
    1520:	73 0b       	sbc	r23, r19
    1522:	84 0b       	sbc	r24, r20
    1524:	ba 0b       	sbc	r27, r26
    1526:	ee 1f       	adc	r30, r30
    1528:	88 f7       	brcc	.-30     	; 0x150c <__divsf3_pse+0x94>
    152a:	e0 95       	com	r30
    152c:	08 95       	ret

0000152e <__fixunssfsi>:
    152e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fp_splitA>
    1532:	88 f0       	brcs	.+34     	; 0x1556 <__fixunssfsi+0x28>
    1534:	9f 57       	subi	r25, 0x7F	; 127
    1536:	98 f0       	brcs	.+38     	; 0x155e <__fixunssfsi+0x30>
    1538:	b9 2f       	mov	r27, r25
    153a:	99 27       	eor	r25, r25
    153c:	b7 51       	subi	r27, 0x17	; 23
    153e:	b0 f0       	brcs	.+44     	; 0x156c <__fixunssfsi+0x3e>
    1540:	e1 f0       	breq	.+56     	; 0x157a <__fixunssfsi+0x4c>
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	1a f0       	brmi	.+6      	; 0x1552 <__fixunssfsi+0x24>
    154c:	ba 95       	dec	r27
    154e:	c9 f7       	brne	.-14     	; 0x1542 <__fixunssfsi+0x14>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <__fixunssfsi+0x4c>
    1552:	b1 30       	cpi	r27, 0x01	; 1
    1554:	91 f0       	breq	.+36     	; 0x157a <__fixunssfsi+0x4c>
    1556:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_zero>
    155a:	b1 e0       	ldi	r27, 0x01	; 1
    155c:	08 95       	ret
    155e:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_zero>
    1562:	67 2f       	mov	r22, r23
    1564:	78 2f       	mov	r23, r24
    1566:	88 27       	eor	r24, r24
    1568:	b8 5f       	subi	r27, 0xF8	; 248
    156a:	39 f0       	breq	.+14     	; 0x157a <__fixunssfsi+0x4c>
    156c:	b9 3f       	cpi	r27, 0xF9	; 249
    156e:	cc f3       	brlt	.-14     	; 0x1562 <__fixunssfsi+0x34>
    1570:	86 95       	lsr	r24
    1572:	77 95       	ror	r23
    1574:	67 95       	ror	r22
    1576:	b3 95       	inc	r27
    1578:	d9 f7       	brne	.-10     	; 0x1570 <__fixunssfsi+0x42>
    157a:	3e f4       	brtc	.+14     	; 0x158a <__fixunssfsi+0x5c>
    157c:	90 95       	com	r25
    157e:	80 95       	com	r24
    1580:	70 95       	com	r23
    1582:	61 95       	neg	r22
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	08 95       	ret

0000158c <__fp_cmp>:
    158c:	99 0f       	add	r25, r25
    158e:	00 08       	sbc	r0, r0
    1590:	55 0f       	add	r21, r21
    1592:	aa 0b       	sbc	r26, r26
    1594:	e0 e8       	ldi	r30, 0x80	; 128
    1596:	fe ef       	ldi	r31, 0xFE	; 254
    1598:	16 16       	cp	r1, r22
    159a:	17 06       	cpc	r1, r23
    159c:	e8 07       	cpc	r30, r24
    159e:	f9 07       	cpc	r31, r25
    15a0:	c0 f0       	brcs	.+48     	; 0x15d2 <__fp_cmp+0x46>
    15a2:	12 16       	cp	r1, r18
    15a4:	13 06       	cpc	r1, r19
    15a6:	e4 07       	cpc	r30, r20
    15a8:	f5 07       	cpc	r31, r21
    15aa:	98 f0       	brcs	.+38     	; 0x15d2 <__fp_cmp+0x46>
    15ac:	62 1b       	sub	r22, r18
    15ae:	73 0b       	sbc	r23, r19
    15b0:	84 0b       	sbc	r24, r20
    15b2:	95 0b       	sbc	r25, r21
    15b4:	39 f4       	brne	.+14     	; 0x15c4 <__fp_cmp+0x38>
    15b6:	0a 26       	eor	r0, r26
    15b8:	61 f0       	breq	.+24     	; 0x15d2 <__fp_cmp+0x46>
    15ba:	23 2b       	or	r18, r19
    15bc:	24 2b       	or	r18, r20
    15be:	25 2b       	or	r18, r21
    15c0:	21 f4       	brne	.+8      	; 0x15ca <__fp_cmp+0x3e>
    15c2:	08 95       	ret
    15c4:	0a 26       	eor	r0, r26
    15c6:	09 f4       	brne	.+2      	; 0x15ca <__fp_cmp+0x3e>
    15c8:	a1 40       	sbci	r26, 0x01	; 1
    15ca:	a6 95       	lsr	r26
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	81 1d       	adc	r24, r1
    15d0:	81 1d       	adc	r24, r1
    15d2:	08 95       	ret

000015d4 <__fp_inf>:
    15d4:	97 f9       	bld	r25, 7
    15d6:	9f 67       	ori	r25, 0x7F	; 127
    15d8:	80 e8       	ldi	r24, 0x80	; 128
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	08 95       	ret

000015e0 <__fp_nan>:
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	80 ec       	ldi	r24, 0xC0	; 192
    15e4:	08 95       	ret

000015e6 <__fp_pscA>:
    15e6:	00 24       	eor	r0, r0
    15e8:	0a 94       	dec	r0
    15ea:	16 16       	cp	r1, r22
    15ec:	17 06       	cpc	r1, r23
    15ee:	18 06       	cpc	r1, r24
    15f0:	09 06       	cpc	r0, r25
    15f2:	08 95       	ret

000015f4 <__fp_pscB>:
    15f4:	00 24       	eor	r0, r0
    15f6:	0a 94       	dec	r0
    15f8:	12 16       	cp	r1, r18
    15fa:	13 06       	cpc	r1, r19
    15fc:	14 06       	cpc	r1, r20
    15fe:	05 06       	cpc	r0, r21
    1600:	08 95       	ret

00001602 <__fp_round>:
    1602:	09 2e       	mov	r0, r25
    1604:	03 94       	inc	r0
    1606:	00 0c       	add	r0, r0
    1608:	11 f4       	brne	.+4      	; 0x160e <__fp_round+0xc>
    160a:	88 23       	and	r24, r24
    160c:	52 f0       	brmi	.+20     	; 0x1622 <__fp_round+0x20>
    160e:	bb 0f       	add	r27, r27
    1610:	40 f4       	brcc	.+16     	; 0x1622 <__fp_round+0x20>
    1612:	bf 2b       	or	r27, r31
    1614:	11 f4       	brne	.+4      	; 0x161a <__fp_round+0x18>
    1616:	60 ff       	sbrs	r22, 0
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <__fp_round+0x20>
    161a:	6f 5f       	subi	r22, 0xFF	; 255
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	08 95       	ret

00001624 <__fp_split3>:
    1624:	57 fd       	sbrc	r21, 7
    1626:	90 58       	subi	r25, 0x80	; 128
    1628:	44 0f       	add	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	59 f0       	breq	.+22     	; 0x1644 <__fp_splitA+0x10>
    162e:	5f 3f       	cpi	r21, 0xFF	; 255
    1630:	71 f0       	breq	.+28     	; 0x164e <__fp_splitA+0x1a>
    1632:	47 95       	ror	r20

00001634 <__fp_splitA>:
    1634:	88 0f       	add	r24, r24
    1636:	97 fb       	bst	r25, 7
    1638:	99 1f       	adc	r25, r25
    163a:	61 f0       	breq	.+24     	; 0x1654 <__fp_splitA+0x20>
    163c:	9f 3f       	cpi	r25, 0xFF	; 255
    163e:	79 f0       	breq	.+30     	; 0x165e <__fp_splitA+0x2a>
    1640:	87 95       	ror	r24
    1642:	08 95       	ret
    1644:	12 16       	cp	r1, r18
    1646:	13 06       	cpc	r1, r19
    1648:	14 06       	cpc	r1, r20
    164a:	55 1f       	adc	r21, r21
    164c:	f2 cf       	rjmp	.-28     	; 0x1632 <__fp_split3+0xe>
    164e:	46 95       	lsr	r20
    1650:	f1 df       	rcall	.-30     	; 0x1634 <__fp_splitA>
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <__fp_splitA+0x30>
    1654:	16 16       	cp	r1, r22
    1656:	17 06       	cpc	r1, r23
    1658:	18 06       	cpc	r1, r24
    165a:	99 1f       	adc	r25, r25
    165c:	f1 cf       	rjmp	.-30     	; 0x1640 <__fp_splitA+0xc>
    165e:	86 95       	lsr	r24
    1660:	71 05       	cpc	r23, r1
    1662:	61 05       	cpc	r22, r1
    1664:	08 94       	sec
    1666:	08 95       	ret

00001668 <__fp_zero>:
    1668:	e8 94       	clt

0000166a <__fp_szero>:
    166a:	bb 27       	eor	r27, r27
    166c:	66 27       	eor	r22, r22
    166e:	77 27       	eor	r23, r23
    1670:	cb 01       	movw	r24, r22
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret

00001676 <__gesf2>:
    1676:	0e 94 c6 0a 	call	0x158c	; 0x158c <__fp_cmp>
    167a:	08 f4       	brcc	.+2      	; 0x167e <__gesf2+0x8>
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	08 95       	ret

00001680 <__mulsf3>:
    1680:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__mulsf3x>
    1684:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_round>
    1688:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__fp_pscA>
    168c:	38 f0       	brcs	.+14     	; 0x169c <__mulsf3+0x1c>
    168e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fp_pscB>
    1692:	20 f0       	brcs	.+8      	; 0x169c <__mulsf3+0x1c>
    1694:	95 23       	and	r25, r21
    1696:	11 f0       	breq	.+4      	; 0x169c <__mulsf3+0x1c>
    1698:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_inf>
    169c:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_nan>
    16a0:	11 24       	eor	r1, r1
    16a2:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_szero>

000016a6 <__mulsf3x>:
    16a6:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_split3>
    16aa:	70 f3       	brcs	.-36     	; 0x1688 <__mulsf3+0x8>

000016ac <__mulsf3_pse>:
    16ac:	95 9f       	mul	r25, r21
    16ae:	c1 f3       	breq	.-16     	; 0x16a0 <__mulsf3+0x20>
    16b0:	95 0f       	add	r25, r21
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	55 1f       	adc	r21, r21
    16b6:	62 9f       	mul	r22, r18
    16b8:	f0 01       	movw	r30, r0
    16ba:	72 9f       	mul	r23, r18
    16bc:	bb 27       	eor	r27, r27
    16be:	f0 0d       	add	r31, r0
    16c0:	b1 1d       	adc	r27, r1
    16c2:	63 9f       	mul	r22, r19
    16c4:	aa 27       	eor	r26, r26
    16c6:	f0 0d       	add	r31, r0
    16c8:	b1 1d       	adc	r27, r1
    16ca:	aa 1f       	adc	r26, r26
    16cc:	64 9f       	mul	r22, r20
    16ce:	66 27       	eor	r22, r22
    16d0:	b0 0d       	add	r27, r0
    16d2:	a1 1d       	adc	r26, r1
    16d4:	66 1f       	adc	r22, r22
    16d6:	82 9f       	mul	r24, r18
    16d8:	22 27       	eor	r18, r18
    16da:	b0 0d       	add	r27, r0
    16dc:	a1 1d       	adc	r26, r1
    16de:	62 1f       	adc	r22, r18
    16e0:	73 9f       	mul	r23, r19
    16e2:	b0 0d       	add	r27, r0
    16e4:	a1 1d       	adc	r26, r1
    16e6:	62 1f       	adc	r22, r18
    16e8:	83 9f       	mul	r24, r19
    16ea:	a0 0d       	add	r26, r0
    16ec:	61 1d       	adc	r22, r1
    16ee:	22 1f       	adc	r18, r18
    16f0:	74 9f       	mul	r23, r20
    16f2:	33 27       	eor	r19, r19
    16f4:	a0 0d       	add	r26, r0
    16f6:	61 1d       	adc	r22, r1
    16f8:	23 1f       	adc	r18, r19
    16fa:	84 9f       	mul	r24, r20
    16fc:	60 0d       	add	r22, r0
    16fe:	21 1d       	adc	r18, r1
    1700:	82 2f       	mov	r24, r18
    1702:	76 2f       	mov	r23, r22
    1704:	6a 2f       	mov	r22, r26
    1706:	11 24       	eor	r1, r1
    1708:	9f 57       	subi	r25, 0x7F	; 127
    170a:	50 40       	sbci	r21, 0x00	; 0
    170c:	9a f0       	brmi	.+38     	; 0x1734 <__mulsf3_pse+0x88>
    170e:	f1 f0       	breq	.+60     	; 0x174c <__mulsf3_pse+0xa0>
    1710:	88 23       	and	r24, r24
    1712:	4a f0       	brmi	.+18     	; 0x1726 <__mulsf3_pse+0x7a>
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	bb 1f       	adc	r27, r27
    171a:	66 1f       	adc	r22, r22
    171c:	77 1f       	adc	r23, r23
    171e:	88 1f       	adc	r24, r24
    1720:	91 50       	subi	r25, 0x01	; 1
    1722:	50 40       	sbci	r21, 0x00	; 0
    1724:	a9 f7       	brne	.-22     	; 0x1710 <__mulsf3_pse+0x64>
    1726:	9e 3f       	cpi	r25, 0xFE	; 254
    1728:	51 05       	cpc	r21, r1
    172a:	80 f0       	brcs	.+32     	; 0x174c <__mulsf3_pse+0xa0>
    172c:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_inf>
    1730:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_szero>
    1734:	5f 3f       	cpi	r21, 0xFF	; 255
    1736:	e4 f3       	brlt	.-8      	; 0x1730 <__mulsf3_pse+0x84>
    1738:	98 3e       	cpi	r25, 0xE8	; 232
    173a:	d4 f3       	brlt	.-12     	; 0x1730 <__mulsf3_pse+0x84>
    173c:	86 95       	lsr	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	b7 95       	ror	r27
    1744:	f7 95       	ror	r31
    1746:	e7 95       	ror	r30
    1748:	9f 5f       	subi	r25, 0xFF	; 255
    174a:	c1 f7       	brne	.-16     	; 0x173c <__mulsf3_pse+0x90>
    174c:	fe 2b       	or	r31, r30
    174e:	88 0f       	add	r24, r24
    1750:	91 1d       	adc	r25, r1
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <_exit>:
    175a:	f8 94       	cli

0000175c <__stop_program>:
    175c:	ff cf       	rjmp	.-2      	; 0x175c <__stop_program>
